#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method


c2.get.functions()  # <script> <functionNameFilter> # lista all functions in a script with description
# functions are identified by someFunctionName( ) but mainly by the brackets ()
# they are parsed till the next curley bracket
# so that this detailed description is part of the grep
{
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    from="$This"
  fi

  local name=$(basename $from)

  cat "$from" \
  | line.find "^[^ ]*$1[^ ]*\(\) " "{" \
  | line.filter "^{" \

  # | line.replace "$name\." \
  # | grep "$1"

  # | line.filter "^#" \
  # | sort \
}

c2.format.functions() {
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    from="$This"
  fi

  local name=$(basename $from)

  c2.get.functions "$from" "$@" \
  | line.replace "$" "${NO_COLOR}" \
  | line.replace "^#" "${GREEN}#" \
  | line.replace "$name\." "${CYAN}${name}${NO_COLOR}\." \
  | line.replace "\([^ ]\)()" "\1${NO_COLOR}" \
  | line.replace "<" "${YELLOW}<" \
  | line.replace ">" ">${GREEN}" \
  | line.replace "#" "${GREEN}#" \
  | line.filter "\.completion" \
  | line.filter "^private" 
}

c2.function.completion() {
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    from="$This"
  fi

  local name=$(basename $from)

  c2.get.functions "$from" "$@" \
  | line.replace "\([^ ]\)().*$" "\1" \
  | line.replace "$name\." \
  | line.replace " {" \
  | line.filter "\.completion" \
  | line.filter "^private" \
  | line.filter "^#" \
  | sort

}

c2.test.absolutePathName() {
  this.absolutePathName "$@"
  echo "${CYAN}${RESULT}"
}

c2.get.function.declaration() {
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    from="$This"
  fi

  local name=$(basename $from)

  c2.get.functions "$from" "$1" \
  | grep "$1(" \
  | line.select 1 \
  | line.replace "\([^ ]\)()" "\1" \
  | line.replace " {" \
  | line.unify '#' " no name" " none${NO_COLOR}" " please add a description" \
  | line.format FORMAT_PARSE_METHOD \
  | line.split "|" \
  | line.unquote \
  | line.add "'" >$CONFIG_PATH/current.method.env

  {
    echo declare -- SCRIPT="$from"
    echo declare -- CLASS="$name"
  } >>$CONFIG_PATH/current.method.env

  if [ "$LOG_LEVEL" -gt "3" ]; then
    cat $CONFIG_PATH/current.method.env
  fi
}


c2.get.function.parameter() {
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    from="$This"
  fi

  local name=$(basename $from)

  c2.get.function.declaration "$from" "$1" 
  source $CONFIG_PATH/current.method.env

  echo $METHOD_PARAMETER \
  | line.split '<' \
  | line.replace '>' \
  | line.filter "^[ \t\']*$" \
  | line.parse.paramList >$CONFIG_PATH/result.env

  cat $CONFIG_PATH/result.env \
  | line.count \
  | line.format "declare -i PARAMS=%d\n" >>$CONFIG_PATH/result.env


  cat $CONFIG_PATH/result.env >>$CONFIG_PATH/current.method.env

  if [ "$LOG_LEVEL" -gt "3" ]; then
    cat $CONFIG_PATH/result.env
  fi

}


c2.debug.parse.param() {
    cat - \
  | line.unify ':' "parameterName" "addDefaultValue" \

}

c2.completion.enable()  # <cmd> # enables the c2 completion on <cmd> 
# ${RED}Does not work, since complete is an internal bash command
# it only works inteactively or when being ${YELLOW}sourced${RED} as a command
{
  local cmd="$1"
  if [ -z "$1" ]; then
    cmd=' '
  else
    shift
  fi
  complete  -o nospace -o bashdefault -o default -F "_oo_completion" "$cmd" 
  RETURN="$1"
}

# oo.completion.enable.completion() {
#   compgen -d $OOSH_DIR/$1
# }

c2.completion() {
  compgen -f $OOSH_DIR/ | line.replace.sedquoted "${OOSH_DIR}/" 
}

c2.completion.discover() {  # <?script> <?method> <?rest> # 
  local argc=$#    # nuber of arguments
  #printf "\n"
  #clear -x

  local word="$1"  # completion word number (important for parameter)
  shift
  debug.log "c2 $* ${RED}$argc word:${word}" 


  local cur="$1"
  shift
  if [ "$cur" = "--" ]; then
    cur=""
  fi

  local script="$1"
  if [ -n "$1" ]; then
    shift
  else
    script="$OOSH_DIR/ng/c2"
  fi

  if [ "$script" = "c2" ]; then
    debug.log "c2 $curr <?script:$1> -"

    script="$1"
    shift

    if [ "$script" = "-" ]; then
      c2.completion >$CONFIG_PATH/completion.result.txt
    else
      c2.completion | grep "^${script}" >$CONFIG_PATH/completion.result.txt
    fi


    local count=$( cat $CONFIG_PATH/completion.result.txt | line.count )
    completionResult=$(cat $CONFIG_PATH/completion.result.txt)    
    
    info.log "got ${RED}${count}${NO_COLOR} suggestions"
    # if [ $word -le 1 ]; then
    #   completionResult=$(cat $CONFIG_PATH/completion.result.txt)    
    # else 
    #   return 0
    # fi
    if [ $word -le 1 ]; then
      return 0
    fi
  fi

  local method="$1"
  info.log "c2 ${YELLOW}<?script:$script> <?method:$method>${NO_COLOR} $*   ${RED}$argc $cur" 
  if [ -z "$completionResult" ]; then
    completionResult="$script"
  fi


  # if [ "$script" = "$completionResult" ]; then
  #   info.log "c2 ${YELLOW}<?script:$completionResult> === <?script:$script>${NO_COLOR} $*   ${RED}$argc $cur" 
  # else 
  #   info.log "c2 ${YELLOW}<?script:$completionResult> =!= <?script:$script>${NO_COLOR} $*   ${RED}$argc $cur" 
  #   return 0
  # fi  



  if [ -n "$1" ]; then shift ; fi

  info.log "c2 completion.discover ${YELLOW}<?script:$script> <?method:$method>${NO_COLOR} $*   ${RED}$argc $cur"

  script=$( which $script )
  class=$(basename $script)

  filter=""
  if ! [ "$method" = "-" ]; then
    filter="$class.$method"
  fi

      # local cur prev opts;
    COMPREPLY=();
    # cur="${COMP_WORDS[COMP_CWORD]}";
    # prev="${COMP_WORDS[COMP_CWORD-1]}";



    info.log "finding functions in $script containing $method" 
      
    c2.format.functions $script ${filter} \
      | line.replace "\.$method" ".${RED}${method}${NO_COLOR}"
    

    c2.function.completion $script ${filter} >$CONFIG_PATH/completion.result.txt


    local count=$( cat $CONFIG_PATH/completion.result.txt | line.count )
    completionResult=$(cat $CONFIG_PATH/completion.result.txt)   
    
    info.log "got ${RED}${count}${NO_COLOR} suggestions"
    if [ $word -le 1 ]; then
      return 0
    else
      important.log "$method"
    fi

    # if [ $count -le 1 ]; then
    #   return 0
    # fi
 

    #if private.call.custom.completion "$cur" "$class" "$method"; then return 0 ; fi
    private.call.custom.completion "$cur" "$class" "$method"

    debug.log "now checking for parameter" 
    c2.get.function.parameter "$script" "$method" 

    source $CONFIG_PATH/current.method.env


    echo "${YELLOW}$METHOD_PARAMETER${NO_COLOR}" \
      | line.replace "[<?]*" \
      | line.split ">" \
      | line.unquote >/dev/tty


    echo "$METHOD_PARAMETER" \
      | line.replace "[<]*" \
      | line.replace ">" \
      | line.replace ":.*$" \
      | line.unquote  >$CONFIG_PATH/completion.parameter.txt

    parc=$(( $word - 2 ))


    PARAMETER_COMPLETION=( $( cat $CONFIG_PATH/completion.parameter.txt ) ) 
    debug.log "Parameter: $parc"
    debug.log "parameter completion method: ${PARAMETER_COMPLETION[parc]}"

    if private.call.custom.completion "$cur" "$class" "$method" "${PARAMETER_COMPLETION[parc]}"; then
      return 0
    else
      private.call.custom.completion "$cur" "$class" "parameter" "${PARAMETER_COMPLETION[parc]}"
    fi



}


private.call.custom.completion() { # <cur> <class> <method> <parameter> # expects $method.completion to echo results
    debug.log "private.call.custom.completion $@"
    cur="$1"
    class="$2"
    method="$3"
    if [ -n "$4" ]; then
      parameter="$4"
      isOptional=$( echo $parameter | line.replace "\?" "OPTIONAL_" | line.replace "=.*$" )
      parameter=$( echo $parameter | line.replace "\?"  )
      parameter=".$parameter"
      parameterENV="PARAM_$isOptional"
    fi
    script="$(which $class)"
    if ! this.functionExists $class.start; then
      info.log "${GREEN}sourcing ${script}${NORMAL}"
      source $script
    fi
    if this.functionExists $class.$method.completion$parameter; then
      $class.$method.completion$parameter "$cur" "$class" "$method" | grep "$cur" >$CONFIG_PATH/completion.result.txt
      RETURN_VALUE=$?
      return $RETURN_VALUE
    else
      debug.log "$class.$method.completion$parameter ${RED}does not exist${NO_COLOR}"

      source $CONFIG_PATH/current.method.env
      if [ -n "$4" ]; then
        debug.log "$parameterENV=${!parameterENV}"
        echo "${!parameterENV}" >$CONFIG_PATH/completion.result.txt
      fi
    fi
    return 1
}

c2.files.completion() { 
  important.log "c2.files.completion $*"
  if [ -z "$2" ]; then
    cd "$2"
  fi
  compgen -f  "$2$1" 
}

c2.env() { 
  echo "exported ENV variables: $*"
  echo "$1=${!1}"
}
c2.env.completion() { 
  compgen -e  "$1" 
}

c2.user() { 
  echo "$*"
}
c2.user.completion() { 
  compgen -u  "$1" 
}

c2.groups() { 
  echo "$*"
}
c2.groups.completion() { 
  compgen -g  "$1" 
}

c2.buildinCommands() { 
  echo "$*"
}
c2.buildinCommands.completion() { 
  compgen -c  "$1" 
}

c2.jobs() { 
  echo "$*"
}
c2.jobs.completion() { 
  compgen -j  "$1" 
}

c2.variables() { 
  echo "all shell variables: $*"
}
c2.variables.completion() { 
  compgen -v  "$1" 
}

c2.alias() { 
  echo "aliases: $*"
}
c2.alias.completion() { 
  compgen -a  "$1" 
}

c2.folders() { 
  echo "folders: $*"
}
c2.folders.completion() { 
  compgen -d  "$1" 
}




c2.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  Usage:
  $this: is the next generation completion with regards to function parameter and types"
  this.help
  echo "
      ----      --------------------------
  Examples
    $this v
    $This init
  "
}
c2.init() {
  console.log "c2 init"
}

c2.install.linux() {
  $SUDO apt install bash-completion
}

c2.status() # # does not work
# ${RED}Does not work, since complete is an internal bash command
# it ouly works inteactively or when being ${YELLOW}sourced${RED} as a command
{
  console.log "c2 status
  please type 
  
  complete
  
  into the console"
  complete # does not work...has to be in top level interactive shell
  cat /etc/profile.d/bash_completion.sh
}

c2.start()
{
  #echo "sourcing init"
  source this
  source line
  #c2.init


  this.start "$@"
}

c2.start "$@"

