#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

backup.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes ...nothing yet
  
  Examples
    $this v
    $this init
  "
}

backup.from() {
  export BACKUP_SOURCE="$1"
  shift
  backup.config.save
  RETURN="$1"
}


backup.to() {
  export BACKUP_TARGET="$1"
  shift
  backup.config.save
  RETURN="$1"
}

backup.strategy() {
  export BACKUP_STRATEGY="$1"
  shift
  backup.config.save
  RETURN="$1"
}

backup.strategy.completion() {
  echo -e "full \\nincremental \\nsecureMove \\nreplaceÂ±ByLinks " | grep "^$1" 
}

backup.from.completion() {
  compgen -o nospace -o dirnames  "$1" | grep "^$1" 
}

backup.to.completion() {
  private.complete.folders "$1"
}

private.complete.folders() {
  compgen -o dirnames "$1" | grep "^$1" 
}

private.complete.folders() {
  #https://unix.stackexchange.com/questions/151118/understand-compgen-builtin-command
  compgen -o dirnames "$1" 
}

backup.config.list() {
  config list backup 
}

backup.config.save() {
  config save backup BACKUP_
}

backup.diff() {  
  ## ${ENV/serchPattern/replaceValue}  replace first only
  ## ${ENV//serchPattern/replaceValue} replace all
  local backup_source="${BACKUP_SOURCE/\//}"
  debug.log "backup_source: $backup_source"
  
  local path="${1/\//}"
  debug.log "path: $path"

  if [ "$backup_source/" = "//" ]; then
    backup_source=""
  fi
  debug.log "backup_source after : $backup_source"
  diff -q --brief "$backup_source/$path" "$BACKUP_TARGET/$path" >$CONFIG_PATH/result.txt
  backup.list.last.diff.result
}

backup.full.diff() {  
  ## ${ENV/serchPattern/replaceValue}  replace first only
  ## ${ENV//serchPattern/replaceValue} replace all
  local backup_source="${BACKUP_SOURCE/\//}"
  debug.log "backup_source: $backup_source"
  
  local path="${1/\//}"
  debug.log "path: $path"

  if [ "$backup_source/" = "//" ]; then
    backup_source=""
  fi
  debug.log "backup_source after : $backup_source"
  diff -qr --brief "$backup_source/$path" "$BACKUP_TARGET/$path" >$CONFIG_PATH/result.txt
  backup.list.last.diff.result
}

backup.inspect() {
  tail -f $CONFIG_PATH/result.txt
}

backup.list.last.diff.result() {
  backup.list.onlyInSource
  backup.list.onlyInTarget
  backup.list.common
}

backup.list.onlyInSource() {
  cat $CONFIG_PATH/result.txt | grep "Only in $backup_source/$path" | xargs -I {} printf "$YELLOW%s\n" {}
  console.log "$NORMAL"
}
backup.list.onlyInTarget() {
  cat $CONFIG_PATH/result.txt | grep "Only in $BACKUP_TARGET/$path" | xargs -I {} printf "$CYAN%s\n" {}
  console.log "$NORMAL"
}

backup.list.onlyInBackup() {
  backup.list.onlyInTarget
}

backup.list.notBackuped() {
  backup.list.onlyInSource
}

backup.list.same() {
  cat $CONFIG_PATH/result.txt | grep "Common " | xargs -I {} printf "$GREEN%s\n" {}

  if [ -z "$1" ]; then
    console.log "
    ${YELLOW}The ${GREEN}green files are common, ${YELLOW}but this does ${RED}not${YELLOW} guarantee that they are the ${RED}same${NORMAL} RECURSIVELY
    fot that use 
    
    ${GREEN}backup full.diff
    "
  fi
  console.log "$NORMAL"
}

backup.list.same.completion() {
  echo -e "no-warn-for-pipe" | grep "^$1" 
}

backup.diff.completion() {
  local backup_source="${BACKUP_SOURCE/\//}"
  local path="${1/\//}"
  #echo path: $path
  if [ "$backup_source" = "/" ]; then
    backup_source=""
  fi
  compgen -o dirnames "$backup_source/$path" | grep "^$backup_source/$path" 
}

backup.list() {
  backup.list.config
}


backup.list.config() {
  console.log "${YELLOW}from Source: 
  $BACKUP_SOURCE
  "
  console.log "${CYAN}to Target:
  $BACKUP_TARGET
  "

  console.log "${NORMAL}Strategy:
  ${WHITE}$BACKUP_STRATEGY${NORMAL}
  "
}

backup.start()
{
  #echo "sourcing init"
  source this
  source $CONFIG_PATH/backup.env
  #source config

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

backup.start "$@"

