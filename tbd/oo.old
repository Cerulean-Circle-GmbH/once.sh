#!/bin/bash

this=$(basename $(which $0))
echo "booting $this" 

if ! [ -x "$(command -v debug.log)" ]; then
    echo "no warn.log.... mitigated using internal functions...status: ok"

    debug.log() {
      if [ -n "$DEBUG" ]; then
        echo "- $*"
      fi
    }
    console.log() {
      echo ">  $*"
    }
    err.log() {
      echo "ERROR>  $*"
    }
    warn.log() {
      echo "> WARNING $*"
    }
fi

oo.version() {
  console.log "$0 version: 20210112 11:11"
}

oo.v() {
  oo.version
}

checkAndFix() {
    debug.log "checkAndFix(1:$1 2:$2 3:$3 4:$4  silent:$5)"
    if [ $2 "$3" ]; then
        if [ -z "$5" ]; then
    	    echo "ok            : $1: $3"
        fi
    else
        if [ -z "$5" ]; then
            echo "does not exist: $1: $3        ...fixing with: $4"
        fi
        $4
    fi
}



oo.discover() {
  # stepDebugger ON
  export PS4='+${LINENO}: '
  if [ -z $OO_USERHOME ]; then
    OO_USERHOME=$(cd;pwd)
  fi

  startDir=$(pwd)

  echo "OO.discover:
  current shell : $SHELL
          script: $0
          dir   : $startDir
          home  : $OO_USERHOME
        hostname: $HOSTNAME
          type  : $HOSTTYPE
          OS    : $OSTYPE"

  if [ -f $OO_USERHOME/.$this ]; then
    source $OO_USERHOME/.${this}
    echo "          PM    : $ONCE_PM
    "
	  debug.log "$this.init with .$this"

    #console.log "oo.stage to: $OO_STATE"
	  #oo.stage $OO_STATE 
  else
    console.log "initialize OO"
    oo.init
    oo.stage
  fi
  #checkAndFix "is privileged" "'$OO_USERHOME'='/root'" "" "OO_PRIVILIDGE=root"
}


oo.cmd() {
    current=$1
    package=$2
    if [ -z "$package" ]; then
        package=$current
    fi   

    oo.check.all.pm
    if ! [ -x "$(command -v $current)" ]; then
        console.log "no $current"
        if [ -n "$OO_PM" ]; then
          case $current in
            eamd)
              oo.load $1 tla/EAMD/UcpComponentSupport/1.0.0/src/sh/eamd
              ;;
            oosh)
              oo.load $1 com/ceruleanCircle/EAM/1_infrastructure/OOSH/1.0.0/src/sh/oosh
              ;;
            *)
              $OO_PM $package
            esac
        else
            console.log "no package manger"
        fi
        #echo "shift -$1-"
        #shift
        #echo "shift -$1-"
        #shift
        #echo "shift -$1-"

    fi
}
oo.load() {
  #set -x
  OO_LOAD_DIR=$OO_SCENARIOS_DIR/localhost/EAM/1_infrastructure/Once/latestServer/oosh
  oo.createPath $OO_LOAD_DIR
  cd $OO_LOAD_DIR/
  #oo.path
  oo.cmd wget
  wget http://$OO_DEFAULT_SERVER/$OO_REPO_NAME/$OO_REPO_COMPONENTS/$2
  chmod 744 $1
  #set +x
  oo.stage done
}

oo.state() {
  oo.version
  console.log "read state from OO_USERHOME: $OO_USERHOME
  "
  cat $OO_USERHOME/.${this}

  if [ -n "$OO_SERVER_PID" ]; then
    console.log "EOF

  Once Server is up.
    Stop      it with: $0 server.stop <?PID:$OO_SERVER_PID>
    Log       it with: $0 log
    Get Log file with: $0 cat
    "
  else
    console.log "EOF

  Once Server is down...
    ";
  fi
}




oo.createPath() {
    console.log " function ${FUNCNAME[0]}($1) $@"


    if [[ "$1" = /* ]]; then
        cd "/"
    fi

    path=""
    console.log "creating path in $(pwd)"

    for current in ${1//// }; do

        if [ -z "$path" ]; then
            path=$current
        else
            path=$path/$current
        fi
        debug.log "checking path: $path"

        oo.createDir $path
    done
}

oo.createDir() {
    local current=$1
    if [ ! -d $current ]; then
        debug.log "$current does not exist: creating it..."
        mkdir -p $current
    fi
}

oo.log() {
  tail -f $OO_USERHOME/oo.log
  oo.done
}
oo.cat() {
      cat $OO_USERHOME/oo.log
      oo.done
}
oo.status() {
  oo.state "$@"
}
oo.stop() {
  oo.server.stop "$@"
}
oo.path() {
  checkAndFix  "default OO_USERHOME location" "-d" "$OO_LOAD_DIR" "oo.createPath $OO_LOAD_DIR"
  #oo.cmd eamd

  PATH=$PATH:$OO_LOAD_DIR:.
  export PATH

  console.log "exported PATH: $PATH
  make shure you called this command as ". $0 path"
  "
  #oo.done
}


oo.clean() {
  rm $OO_USERHOME/.${this}
  rm $OO_USERHOME/.${this}
  #rm $OO_USERHOME/scripts/eamd
  local this=$(which $0)
  rm -Rf $OO_LOAD_DIR
  if [ "$1" = "all" ]; then
    console.log "force cleaning all environments"
    find $OO_SCENARIOS_DIR -name .oo -print
    find $OO_SCENARIOS_DIR -name .oo -exec rm {} \;
  fi
  exit 0 
}
oo.config() {
  oo.cmd vim
  vim $OO_USERHOME/.${this}
}
oo.edit() {
  oo.cmd vim
  vim $this
}

oo.stage() {
  if [ -n "$1" ]; then
	  OO_STATE=$1
    oo.hibernate update
  fi
  if [ -z "$OO_STATE" ] ; then
	  OO_STATE=discover
  fi
  debug.log "Once transition to: $OO_STATE $@"
  shift
  oo.$OO_STATE "$@"
  if [ "$?" = "0" ]; then
    next=$@
    return 0
  else
    err.log "$?"
    oo.stage done
  fi
}
oo.hibernate() {
  #writes all OO_ env variables to .oo in the users home directroy
	set | grep ^OO_ >|$OO_USERHOME/.${this}
  if [ -z "$1" ]; then
    console.log "hibernating oo"
    exit 0
  fi
}
oo.update() {
  set -x
  local branch=$2
  case $1 in
    byIP)
      scp $OO_USERHOME/scripts/oo.sh root@$OO_DEFAULT_SSH_IP:/root
      ;;
    server)
      scp $OO_USERHOME/scripts/oo.sh root@$OO_DEFAULT_SERVER:/root
      #scp $OO_USERHOME/scripts/oo.sh root@$OO_DEFAULT_SERVER:$OO_COMONENTS_DIR/tla/EAM/layer1/Thinglish/Once/latestServer/src/sh/oo.sh
      #scp $OO_USERHOME/scripts/oo.sh root@$OO_DEFAULT_SERVER:$OO_COMONENTS_DIR/tla/EAM/layer1/Thinglish/Once/4.0.0/src/sh/oo.sh
      #scp $OO_USERHOME/scripts/oo.sh root@$OO_DEFAULT_SERVER:$OO_SCENARIOS_DIR/localhost/EAM/1_infrastructure/Once/4.0.0/oosh/${this}
      ;;
    here)
      scp root@$OO_DEFAULT_SSH_IP:/root/oo.sh $OO_USERHOME/scripts/oo.sh
      ;;
    fromBranch)
      cd $OO_REPO_DIR
      git pull
      git reset HEAD --hard
      #git clean -fdx
      git merge $branch
      git push
      oo.stage done
      set +x
      exit 0
      ;;
    cmd)
      rm $(which $2)
      oo.cmd $2
      ;;
    *)
      #oo.cmd ${this}
      cd $OO_REPO_DIR
      git pull
      ;;
  esac
  set +x
  oo.done
}
oo.done() {
	OO_STATE=state
  oo.hibernate update
  console.log "oo: done"
}
oo.init() {
  export PS4='+${LINENO}: '
  #wo-da.de IP for oo.update
  OO_DEFAULT_SSH_IP=178.254.36.232
  #for oo.load
  #OO_DEFAULT_SERVER=192.168.178.49:8080
  OO_DEFAULT_SERVER=test.wo-da.de
  OO_SHELL=$SHELL
  OO_USERHOME=$(cd;pwd)

  
  OO_LOAD_DIR=$OO_USERHOME/oo.sh
  OO_DIR=$OO_LOAD_DIR
  checkAndFix  "default OO_LOAD_DIR location" "-d" "$OO_LOAD_DIR" "oo.createPath $OO_LOAD_DIR"
  OO_STATE=state
  export OO_DIR


  once check.all.pm
  This=$(which $0)
  #checkAndFix "make oo.alias $This" -L "$(dirname $(which $0))/oo "ln -s $(which $0) $(dirname $(which $0))/oo

  oo.hibernate update
  oo.path

  #oo.stage
}
oo.start() {
  oo.discover
  if [ -z "$1" ]; then 
        console.log "no parameters! stage to: $OO_STATE"
        oo.stage
        console.log "$0: Bye"
        exit 0
  fi

  while [ -n $1 ]; do
    debug.log "1: -$1-"
    case $1 in

      discover)
        oo.discover
        if [ "$OO_STATE"="disvocer" ] ; then
          OO_STATE=check.installation
          oo.stage
        fi
        ;;
      start)
        once.server.start "$@"
        ;;
      '')
        console.log "$this: no more arguments"
        #exit 0
        return
        ;;
      *)
        console.log "oo.stage to: $@"
        oo.stage "$@"
        console.log "next: -$?-$next-"
        console.log "return args $@"
    esac
    shift
    console.log "shift:  -$@-"


  done
  oo.stage $OO_STATE
}

oo.a() {
  local anArray=(1 2 3 4 "hello world")
  for e in ${anArray[@]}; do
    echo "${!anArray[@]}=e"
  done
  for e in ${!anArray[@]}; do
    echo "${anArray[e]}=e"
  done
}
oo.start "$@"

console.log "$this: EXIT"


