#!/usr/bin/env bash
#clear
#export PS4='\e[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \e[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

install.headless() # # installs all everything needed for headless operation
{
  ossh status
  sh -c "$(wget -O- https://gist.githubusercontent.com/vietanhdev/c2cb96eb6cf5b9232a04dfbe8bdaba2f/raw/164c8f9f7eccbcacaa44b14ddb4225d283e6a3c7/install_realvnc_server.sh)"

  # on pixel i used tigervnc

}

install.docker() # # installs all everything needed for headless operation
{
  oo cmd docker.io
  user group.add docker $USER

}

install.nodejs() # <version> # installs all everything needed for headless operation
{
  curl -sL https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh -o install_nvm.sh
  bash install_nvm.sh
  nvm install node
  nvm ls

  export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && \. "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
}

install.staus.headless() {
  systemctl status vncserver-virtuald.service
  systemctl status vncserver-x11-serviced.service
}

install.headless.enable() {
  systemctl start vncserver-virtuald.service
  systemctl start vncserver-x11-serviced.servicep
  systemctl enable vncserver-virtuald.service
  systemctl enable vncserver-x11-serviced.service
}

install.pacstall() {
  bash -c "$(wget -q https://git.io/JsADh -O -)"
}

install.snapAppStore() # # installs all everything needed for headless operation
{
  oo cmd snapd
  snap install snap-store

}

install.chromium() # # installs all everything needed for headless operation
{
  oo cmd chromium-browser
}

install.samba.support() # #
{
  important.log "Needs to be run as ROOT"
  oo cmd samba 
  oo cmd samba-common-bin
  oo cmd smbclient

  oo cmd netatalk

  important.log "Please set a samba password..."
  smbpasswd -a

  systemctl restart smbd

  #vim /etc/samba/smb.conf
    # [pishare]
    # path = /media/pi/shared
    # writeable=Yes
    # create mask=0777
    # directory mask=0777
    # public=no

  #vim /etc/nsswitch.conf
  #vim /etc/avahi/services/rfb.service
      # <?xml version="1.0" standalone='no'?>
      # <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
      # <service-group>
      #   <name replace-wildcards="yes">%h</name>
      #   <service>
      #     <type>_rfb._tcp</type>
      #     <port>5900</port>
      #   </service>
      # </service-group>  

  #vim /etc/avahi/services/smb.service
      # <?xml version="1.0" standalone='no'?>
      # <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
      # <service-group>
      #   <name replace-wildcards="yes">%h</name>
      #   <service>
      #     <type>_smb._tcp</type>
      #     <port>445</port>
      #   </service>
      #   <service>
      #     <type>_device-info._tcp</type>
      #     <port>0</port>
      #     <txt-record>model=Xserve</txt-record>
      #   </service>
      # </service-group>

  ## xxx service avahi-daemon start
  ## xxx service netatalk start
  systemctl enable avahi-daemon
  systemctl enable netatalk

  systemctl restart smbd
  systemctl restart avahi-daemon
  systemctl restart netatalk

  important.log "Please Reboot before you continue...."
}

install.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  Usage:
  $this: command   Parameter and Description"
  this.help
  echo "
  
  Examples
    $this v
    $this init
    ----------
  "
}

install.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

install.start "$@"

