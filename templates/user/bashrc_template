# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything just configure
EXPECTED_RETURN_VALUE=1

#if [ -z "$CONFIG" ]; then
    CONFIG=~/config/user.env
#fi

case $- in
*i*) ;;
*) return ;;
esac

if [ -z "$USER" ]; then
  USER=$(whoami)
  export USER
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color | *-256color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi
# find    : (\\e[^m]*m)
# replace : \[$1\]
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\e[01;32m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\w\[\e[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*) ;;

esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

## https://wpbeaches.com/how-to-add-to-the-shell-path-in-macos-using-terminal/
export LSCOLORS=ExFxBxDxCxegedabagacad
# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias dc='docker-compose '
alias calc='/usr/bin/dc --help'

alias c='source $CONFIG;config list'
alias v='result.view'
alias r='v;result.load'


# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi


_quote_all() { READLINE_LINE="${READLINE_LINE@Q}"; }
bind -x '"\C-x\C-o":_quote_all'
bind -x '"\C-x\C-q":_quote_all'
########################### once specific extensions


if [ -f "$CONFIG" ]; then
    source "$CONFIG"
    if ! [ -f $CONFIG_PATH/color.env ]; then
        line init
    fi
    source $CONFIG_PATH/setup.color.env
    source "$OOSH_DIR/log"
fi

if [ "$USER" = "root" ]; then
    export PS1="\[\e[0m\][\$OOSH_PROMPT\$OOSH_SSH_CONFIG_HOST] \[\e[31m\]\u\[\e[0m\]@\[\e[32m\]\h:\[\e[33;1m\]\w\[\e[0m\] > "
    export SUDO=""
else
    export PS1="\[\e[0m\][\$OOSH_PROMPT\$OOSH_SSH_CONFIG_HOST] \[\e[36m\]\u\[\e[0m\]@\[\e[32m\]\h:\[\e[33;1m\]\w\[\e[0m\] > "
    export SUDO="sudo "
fi



# _oo_completion() 
# { 
#     $OOSH_DIR/ng/c2 completion.discover ${COMP_WORDS[*]} - | grep "${cur}";
#     COMPREPLY=( $( cat $CONFIG_PATH/result.txt ) );
#     # echo "${YELLOW}result
    
#     # ${COMPREPLY[@]}
#     # "

#     printf "\nyour command > ${GREEN}${COMP_WORDS[*]}${NO_COLOR}"
#     return 0
# }

# if [ -d ${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions ] && ! shopt -oq posix; then
# echo finding completions
# for bcfile in ${BASH_COMPLETION_USER_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/bash-completion}/completions/*; do
#     echo sourcing $bcfile
#     . $bcfile
# done
# fi
# complete -o nospace -o bashdefault -o default -F _oo_completion c2 
source $OOSH_DIR/templates/user/2c.intsall

function onExit() {
  RETURN_VALUE=$?
  echo "bashrc onExit: $RETURN_VALUE"
  export ERROR_CODE_RECONFIG=117
  create.result $RETURN_VALUE "$RETURN_VALUE" save
#   if [ "$RETURN_VALUE" -eq "$ERROR_CODE_RECONFIG" ]; then
#     unset STARTED_OOSH
#     export STARTED_OOSH
#     #echo -e "${CYAN}applying new configuration${NORMAL}"
#     $OOSH_DIR/this 
#     #echo -e "${CYAN}exited onExit${NORMAL}"
#     exit $ERROR_CODE_RECONFIG
#   fi
}
trap 'onExit  ${?}' EXIT 

function reconfigure() {
    unset STARTED_OOSH
    export STARTED_OOSH
    echo "applying new configuration - from .bashrc"
    exit $ERROR_CODE_RECONFIG
}

if [ -f ~/.once ]; then
    . ~/.once
else
    silent.log "Once is not yet installed. use: once init"
fi

if [ -n "$OOSH_DIR" ]; then
    OOSH_PROMPT="oosh "
fi



  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/etc/bash_completion.d/nvm" ] && \. "$NVM_DIR/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


echo "$CYAN
    Welcome to Web 4.0

"
