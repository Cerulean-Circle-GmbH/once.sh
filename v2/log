#!/bin/bash

#echo "entering: ${BASH_SOURCE[0]}"
#echo "remove all echos to preseve output"
#echo ""

log.init()
{
  if [ -n "$1" ]; then
    export LOG_LEVEL="$1"
    important.log "log level changed to $LOG_LEVEL"
  else
    export LOG_LEVEL=0
  fi
  important.log "log initialized on level $LOG_LEVEL"
}

console.log()
{
  if [ "$LOG_LEVEL" -gt "2" ]; then
    echo -e "\033[0m$@"
  fi
}

success.log() {
    if [ "$LOG_LEVEL" -gt "2" ]; then
        echo -e "\033[1;32mSUCCESS> $@\033[0m" 
    fi
}

warn.log()
{
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;33m> WARNING $@\033[0m"                                    ## yellow
    fi
}

important.log()
{
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;96m> IMPORTANT $@\033[0m"                                    ## cyan
    fi
}

problem.log() {
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;31mPROBLEM BREAKPOINT> $@\033[0m" 
        export STEP_DEBUG=ON
    fi  
}

info.log()
{
    if [ "$LOG_LEVEL" -gt "3" ]; then
        echo -e "\033[0mINFO> $@"                                             ## normal
    fi
}

debug.log() {
    if [ "$LOG_LEVEL" -gt "3" ]; then  
        echo -e "\033[1;36m- $@\033[0m"
    fi
}

stop.log() {
    if [ "$LOG_LEVEL" -gt "3" ]; then
        echo -e "\033[1;32mBREAKPOINT> $@\033[0m" 
        export STEP_DEBUG=ON
    fi  
}

error.log() {
    err.log "$@"
}
err.log() {

    if [ "$LOG_LEVEL" -gt "0" ]; then   
      echo -e "\033[1;31mERROR> $@\033[0m"    
    fi

    if [ "$LOG_LEVEL" -gt "4" ]; then   
        export STEP_DEBUG=ON
    fi   
}

log.checkDebug()
{
  if [ -n "$1" ]; then
    LOG_LEVEL="$1"
    important.log "log level changed to $LOG_LEVEL"
  fi

  if [ "$LOG_LEVEL" -gt "6" ]; then
    export STEP_DEBUG=ON 
  else
    export STEP_DEBUG=OFF
  fi

  if [ "$LOG_LEVEL" -gt "5" ]; then
    export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
    set -x
  else
    { 
        set +x
    } 2>/dev/null
  fi

}

log.start()
{
  #echo "log startet"
  if [ -z "$LOG_LEVEL" ]; then
    log.init $1
  fi

  log.checkDebug
}



log.start "$@"

console.log "
console.log: still in ${BASH_SOURCE[0]##*/}
"