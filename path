#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

path.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes ...nothing yet
  
  Examples
    $this v
    $this init
  "
}

path.list() {
  loop list PATH print "$1"
}

path.env() {
  create.result 0 "export PATH=$PATH" "$1" 
  console.log "
          $RESULT
  "
  return $(result save)
}


path.test.result.ls() {
  check message "if ${CYAN}oosh${COLOR_NONE} is configuring the PATH" file $CONFIG exists call path show.oosh.path

  cat $CONFIG_PATH/result.env
}

path.status() {
  check message "if ${CYAN}oosh${COLOR_NONE} is configuring the PATH" file $CONFIG exists call path show.oosh.path
  #result.load
  source $CONFIG_PATH/result.env
  local _oosh_path="$RESULT"

  
  check message "if ${CYAN}once${COLOR_NONE} is configuring the PATH" file ~/.once exists call path show.once.path
  source $CONFIG_PATH/result.env
  local _once_path="$RESULT"


  console.log "
Result:
  "

  if ! [ "$_oosh_path" == "$_once_path" ]; then
    warn.log "
  STATUS: paths are not equal
    OOSH: $_oosh_path
    ONCE: $_once_path
    "
    path.env
    source $CONFIG_PATH/result.env
    local _current_path="$RESULT"
    if [ "$_oosh_path" == "$_current_path" ]; then
      success.log " PATH is equal to OOSH configuration"
    fi
    if [ "$_once_path" == "$_current_path" ]; then
      warning.log "PATH is equal to ONCE configuration"
    fi
  else
    success.log "
   STATUS: all well configured 
    "
  fi

}

path.show.once.path() {
  #this.absolutePath ~/.once
  silent.log "ONCE config from: $HOME/.once"
  local _once_path="export $(cat ~/.once | grep 'PATH=')" 
  
  create.result 0 "$_once_path" "$1"
  console.log "$RESULT"
  return $(result save)
}

path.show.oosh.path() {
  #this.absolutePath ~/.once
  silent.log "OOSH config from: $CONFIG"
  create.result 0 "$(cat $CONFIG | grep '^export PATH=')" "$1"
  console.log "$RESULT"
  return $(result save)
}


path.add() {
  path.append "$*"
}

path.push() {
  path.append "$*"
}

path.put() {
  path.prepend "$*"
}

path.rm() {
  path.remove "$*"
}

path.append() {
  #loop $PATH : add "$1" result
  loop list PATH add "$1" result
  shift
  private.update.config
  RETURN=$1
}

path.prepend() {
  loop $PATH : put "$1" result
  shift
  private.update.config
  RETURN=$1
}

path.remove() {
  loop $PATH : rm "$1" result
  shift
  private.update.config
  RETURN=$1
}




private.update.config() {
  source $CONFIG_PATH/result.env
  PATH=$list
  config save
  success.log "
  
  
  Path updated in OOSH config:  $CONFIG

  new PATH is: $PATH
  
  to apply to the current shell please type: 
  reconfigure
  "
  
}


path.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

path.start "$@"

