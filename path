#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

path.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command   description and Parameter

      usage        prints this dialog while it will print the status when tehere are no parameters       

      status       checks the OOSH and ONCE cofiguration
      env          prints the environment variable and updates result.env
      list         lists all paths line by line

      add
      push
      append       all append the provided <path> to the PATH and update the config

      put
      prepend      all prepend the provided <path> to the PATH and update the config
      
      rm
      remove       all remove all occurences of the provided <path> from the PATH and update the config

      file.global  lists the paths in /etc/paths
      file.user                    in ~/paths
      file.custom                  in <file>

      load          loads the paths from <file>  !!! not yet implementd
      save          saves the PATH    to <file>  !!! not yet implementd

  
  Examples
    $this v
    $this init
  "
}

path.list() {
  loop list PATH print "$1"
}

path.env() {
  create.result 0 "export PATH=$PATH" "$1" 
  console.log "
          $RESULT
  "
  return $(result save)
}

path.file.global() {
  cat /etc/paths
}

path.file.user() {
  cat ~/paths
}

path.file.custom() {
  cat "$1"
}


path.status() {
  check message "if ${CYAN}oosh${COLOR_NONE} is configuring the PATH" file $CONFIG exists call path show.oosh.path
  #result.load
  source $CONFIG_PATH/result.env
  local _oosh_path="$RESULT"

  
  check message "if ${CYAN}once${COLOR_NONE} is configuring the PATH" file ~/.once exists call path show.once.path
  source $CONFIG_PATH/result.env
  local _once_path="$RESULT"


  console.log "
Result:
  "

  if ! [ "$_oosh_path" == "$_once_path" ]; then
    warn.log "
  STATUS: paths are not equal
    OOSH: $_oosh_path
    ONCE: $_once_path
    "
    path.env
    source $CONFIG_PATH/result.env
    local _current_path="$RESULT"
    if [ "$_oosh_path" == "$_current_path" ]; then
      success.log " PATH is equal to OOSH configuration"
    fi
    if [ "$_once_path" == "$_current_path" ]; then
      warning.log "PATH is equal to ONCE configuration"
    fi
  else
    success.log "
   STATUS: all well configured 
    "
  fi

}

path.show.once.path() {
  #this.absolutePath ~/.once
  silent.log "ONCE config from: $HOME/.once"
  local _once_path="export $(cat ~/.once | grep 'PATH=')" 
  
  create.result 0 "$_once_path" "$1"
  console.log "$RESULT"
  return $(result save)
}

path.show.oosh.path() {
  #this.absolutePath ~/.once
  silent.log "OOSH config from: $CONFIG"
  create.result 0 "$(cat $CONFIG | grep '^export PATH=')" "$1"
  console.log "$RESULT"
  return $(result save)
}


path.add() {
  path.append "$*"
}

path.push() {
  path.append "$*"
}

path.put() {
  path.prepend "$*"
}

path.rm() {
  path.remove "$*"
}

path.append() {
  #loop $PATH : add "$1" result
  loop list PATH add "$1" result
  shift
  private.update.config
  RETURN=$1
}

path.prepend() {
  loop $PATH : put "$1" result
  shift
  private.update.config
  RETURN=$1
}

path.remove() {
  loop $PATH : rm "$1" result
  shift
  private.update.config
  RETURN=$1
}




private.update.config() {
  source $CONFIG_PATH/result.env
  PATH=$list
  config save
  success.log "
  
  
  Path updated in OOSH config:  $CONFIG

  new PATH is: $PATH
  
  to apply to the current shell please type: 
  reconfigure
  "
  
}

private.pathadd() {
    if [ -d "$1" ] && ! echo $PATH | grep -E -q "(^|:)$1($|:)" ; then
        if [ "$2" = "after" ] ; then
            PATH="$PATH:${1%/}"
        else
            PATH="${1%/}:$PATH"
        fi
    fi
}

private.pathrm() {
    PATH="$(echo $PATH | sed -e "s;\(^\|:\)${1%/}\(:\|\$\);\1\2;g" -e 's;^:\|:$;;g' -e 's;::;:;g')"
}


path.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

path.start "$@"

