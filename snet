#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

snet.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes ...nothing yet
  
  Examples
    $this v
    $this init
  "
}

snet.docker.service.status() {
  service docker status
}

snet.service.install() {
  console.log "should write 
  /var/dev/EAMD.ucp/Components/org/shift/EAM/2_systems/ShifterNetworkServer/1.0.0/src/systemd/snet.service
  
  to 
  /etc/systemd/system
  "
  echo cp /var/dev/EAMD.ucp/Components/org/shift/EAM/2_systems/ShifterNetworkServer/1.0.0/src/systemd/snet.service /etc/systemd/system
  echo chmod 664 /etc/systemd/system/snet.service
  echo systemctl daemon-reload
  echo systemctl enable /etc/systemd/system/snet.service
}

snet.service.start() {
  echo once docker.scenario.start psql
  echo once docker.scenario.start jhipster
  echo once docker.scenario.start keycloak
  echo once docker.scenario.start pq
  echo once start fast
}

snet.service.stop() {
  echo once stop
  echo once docker.scenario.stop pq
  echo once docker.scenario.stop jhipster
  echo once docker.scenario.stop keycloak
  echo once docker.scenario.stop psql
}

snet.service.status() {
  docker ps
  once states.list
}

snet.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

snet.start "$@"

