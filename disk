#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

disk.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes ...nothing yet

      space.usage     lists and sums used disk space for number of <levels>
      space.free      show free space on the mounted volumes
  
  Examples
    $this v
    $this init
  "
}

disk.space.used() {
  local level="$1"
  shift
  if [ -z "$level" ]; then
    level=2
  fi
  if ! this.isNumber $level; then
      warn.log "level is not a number: $level"
      level=2
      silent.log "fixing level to 2"
  fi
  capture.log du -chd $level 
  RETURN="$1"
}

disk.space.free() {
  df -h
}

disk.find() {
  find . "$*"
}

disk.find.completion() {
  echo -e "-type f\\n-type d\\n-name " | grep "^$1"
}

disk.find.dir() {
  find . -type d -name "$1"
}

disk.find.file() {
  find . -type f -name "$1"
}


disk.list.result.bySize() {
  #cat $CONFIG_PATH/result.txt | sort -hr | awk '{printf "%-10s %40s %.*s\n",$1,$2,$1,"▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"}'
  cat $CONFIG_PATH/result.txt | sort -hr | awk '{printf "%-10s %40s %.*s\n",$1,$2,$1,"◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼"}'
  
}

disk.list.result() {
  cat $CONFIG_PATH/result.txt 
}

disk.calc() {
  echo $(($1))
}

disk.calc.getBytesInTB() {
  echo $(($1*1024*1024*1024*1024))
}

disk.calc.getBytesInGB() {
  echo $(($1*1024*1024*1024))
}

disk.calc.getBytesInMB() {
  echo $(($1*1024*1024))
}

disk.calc.getBytesInKB() {
  echo $(($1*1024))
}

disk.calc.getTB() {
  echo "$(($1/1024/1024/1024/1024)) TB"
}

disk.calc.getGB() {
  echo "$(($1/1024/1024/1024)) GB"
}

disk.calc.getMB() {
  echo "$(($1/1024/1024)) MB"
}

disk.calc.getKB() {
  echo "$(($1/1024)) KB"
}

disk.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

disk.start "$@"

