#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

disk.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes ...nothing yet

      space.usage     lists and sums used disk space for number of <levels>
      space.free      show free space on the mounted volumes
  
  Examples
    $this v
    $this init

    $this image disk1 
  "
}

disk.space.used() {
  local level="$1"
  shift
  if [ -z "$level" ]; then
    level=2
  fi
  if ! this.isNumber $level; then
      warn.log "level is not a number: $level"
      level=2
      silent.log "fixing level to 2"
  fi
  capture.log du -chd $level 
  RETURN="$1"
}

disk.space.free() {
  df -h
}

disk.find() {
  find . "$*"
}

disk.find.completion() {
  echo -e "-type f\\n-type d\\n-name " | grep "^$1"
}

disk.find.dir() {
  find . -type d -name "$1"
}

disk.find.file() {
  find . -type f -name "$1"
}


disk.list.result.bySize() {
  #cat $CONFIG_PATH/result.txt | sort -hr | awk '{printf "%-10s %40s %.*s\n",$1,$2,$1,"▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄"}'
  cat $CONFIG_PATH/result.txt | sort -hr | awk '{printf "%-10s %40s %.*s\n",$1,$2,$1,"◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼◼"}'
  
}

disk.list.result() {
  cat $CONFIG_PATH/result.txt 
}

disk.calc() {
  echo $(($1))
}

disk.calc.getBytesInTB() {
  echo $(($1*1024*1024*1024*1024))
}

disk.calc.getBytesInGB() {
  echo $(($1*1024*1024*1024))
}

disk.calc.getBytesInMB() {
  echo $(($1*1024*1024))
}

disk.calc.getBytesInKB() {
  echo $(($1*1024))
}

disk.calc.getTB() {
  echo "$(($1/1024/1024/1024/1024)) TB"
}

disk.calc.getGB() {
  echo "$(($1/1024/1024/1024)) GB"
}

disk.calc.getMB() {
  echo "$(($1/1024/1024)) MB"
}

disk.calc.getKB() {
  echo "$(($1/1024)) KB"
}

disk.list() {
  if os.check disk.list; then
    $RESULT "$@"
  else
    important.log "$RESULT is not supported"
  fi  
}

disk.list.darwin() {
  diskutil list
}

disk.eject() {
  if os.check disk.eject; then
    $RESULT  "$@"
  else
    important.log "$RESULT is not supported"
  fi  
}

disk.eject.darwin() {
  local disk="$1"
  if [ -n "$1" ]; then
    shift
  fi

  if [ -n "$disk" ]; then
    diskutil unmountDisk /dev/$disk
  else
    private.disk.args.error.disk
  fi
}

private.disk.args.error.disk() {
    error.log "no disk specified."
    disk.list
    important.log "just specify the disk name: if /dev/disk1 is listed do: disk eject disk1"
}

disk.image() {
  if os.check disk.image; then
    $RESULT  "$@"
  else
    important.log "$RESULT is not supported"
  fi  
}

disk.image.darwin() {
  disk.image.linux "$@"
}

disk.image.linux() {
  local disk="$1"
  if [ -n "$1" ]; then
    shift
  else
    private.disk.args.error.disk
    return 2
  fi
  local imageFile="$1"
  if [ -n "$1" ]; then
    shift
  else 
    imageFile="./$disk.img.gz"
  fi

  if [ "$user" = "root" ]; then
    SUDO=""
  else
    SUDO="sudo "
  fi

  #$SUDO dd if="/disk/r${disk}" bs=1m status=progress | gzip >$imageFile
  $SUDO pv -tpreb "/dev/r${disk}" | dd bs=128m  | gzip >$imageFile
  
  #sudo echo "starting"
  #($SUDO pv -n "/dev/r${disk}" | dd of="$imageFile" bs=128M conv=notrunc,noerror) 2>&1 | dialog --gauge "Cloning disk /dev/r${disk} to , please wait..." 10 70 0

}

disk.restore.linux() {
  local disk="$1"
  if [ -n "$1" ]; then
    shift
  else
    private.disk.args.error.disk
    return 2
  fi

  local imageFile="$1"
  if [ -n "$1" ]; then
    shift
  else 
    imageFile="./$disk.img.gz"
  fi


  if [ "$user" = "root" ]; then
    SUDO=""
  else
    SUDO="sudo "
  fi

  disk.eject ${disk}
  sudo echo "starting..."
  #$SUDO dd if="/disk/r${disk}" bs=1m status=progress | gzip >$imageFile
  $SUDO   pv -tpreb "$imageFile" | gzip -dc | $SUDO dd of=/dev/r${disk} bs=128m conv=notrunc,noerror
  

  #($SUDO pv -n "/dev/r${disk}" | dd of="$imageFile" bs=128M conv=notrunc,noerror) 2>&1 | dialog --gauge "Cloning disk /dev/r${disk} to , please wait..." 10 70 0

}

disk.start()
{
  #echo "sourcing init"
  source this
  source os

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

disk.start "$@"

