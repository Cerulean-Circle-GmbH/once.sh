#!/bin/bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

user.id.completion() {
  echo "-u" "-n" 
  echo "-g"
}

user.id()
{
  id "$@"
}

user.ssh.status.completion() {
  echo log
}

user.ssh.status()
{
  if [ -d ~/.ssh ]; then
    create.result 0 "ssh is initialized for $USER" "$1"
  else
    create.result 1 "ssh does not exist for $USER" "$1"
  fi

  if [ "$1" == "log" ]; then
    shift
    console.log "$RESULT" 
    RETURN=$1
  fi
  return "$(result)"
}

user.ssh.init()
{
  if user.ssh.status log; then
    console.log ".ssh exists"
    tree ~/.ssh
  else
    console.log "initialising new .ssh"
    ssh-keygen
    mkdir ~/.ssh/public_keys
    mkdir ~/.ssh/private_key
    cp ~/.ssh/id_rsa ~/.ssh/private_key/$USER.$(hostname -f).private_key
    cp ~/.ssh/id_rsa.pub ~/.ssh/public_keys/$USER.$(hostname -f).public_key
    {
      echo "
Host WODA.test
 User root
 Port 22
 HostName 178.254.18.182
 IdentityFile ~/.ssh/id_rsa

Host WODA.dev.root
 User root
 Port 22
 HostName cerulean.it
 IdentityFile ~/.ssh/id_rsa
 
Host WODA.dev
 User developking
 Port 22
 HostName cerulean.it
 IdentityFile ~/.ssh/id_rsa
      "

    } >~/.ssh/config
  tree ~/.ssh
  fi
}

user.update.authorized_keys()
{
  if user.ssh.status; then
    rm ~/.ssh/authorized_keys
    cat ~/.ssh/public_keys/* >>~/.ssh/authorized_keys

    chmod 770 ~/.ssh
    chmod 600 ~/.ssh/authorized_keys
  fi
}

user.create()                   # expects "name <uid gid>" and creates a new user with home dir
{

  local name=$1
  local custom_uid=
  local custom_gid=
  shift
  if [ -n "$1" ]; then
    custom_uid=$1
    shift
  fi
  if [ -n "$1" ]; then
    custom_gid=$1
    shift
  fi

  if [ -d $REPO_DIR ]; then
    warn.log "Repository does not exist: $REPO_DIR"
  fi

  if [ -n "$custom_uid" ]; then
    $ONCE_SUDO useradd -m $name -u$custom_uid -g$custom_gid -s /bin/bash
  else
    $ONCE_SUDO useradd -m $name -s /bin/bash
  fi
  $ONCE_SUDO usermod -aG sudo $name
  useradd -g dev $name 
  once.user.init $name
  

  RETURN=$1

}

user.check.group() {
  local group=$1
  shift 
  if [ $(getent group admin) ]; then
    create.result 0 "group $group exists" "$1"
  else
    create.result 1 "group $group does not exist"  "$1"
  fi
  console.log "$RESULT"
  return "$(result)"
}


user.usage()
{
  local this=${0##*/}
  echo "You started 
$0
  
  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when tehere are no parameters          
      v         print version information
      init      initializes a new user config  
  
  Examples
    $this v
    $this init

  OS details:
      OS_CMD_USER_ADD=$OS_CMD_USER_ADD
      OS_CMD_USER_MDO=$OS_CMD_USER_MOD  
      OS_CMD_USER_DEL=$OS_CMD_USER_DEL
  "
}

user.init() {
  if [ -z "$USER" ]; then
    USER=$(id -u -n)
  fi
  ONCE_SUDO=sudo

  if [ -x "$(command -v adduser)" ]; then
    OS_CMD_USER_ADD=adduser
  fi
  if [ -x "$(command -v useradd)" ]; then
    OS_CMD_USER_ADD=useradd
  fi
  if [ -x "$(command -v userdel)" ]; then
    OS_CMD_USER_DEL=userdel
  fi
  if [ -x "$(command -v usermod)" ]; then
    OS_CMD_USER_MOD=usermod
  fi
}

user.start()
{
  #echo "sourcing init"
  source init
  user.init

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

user.start "$@"

