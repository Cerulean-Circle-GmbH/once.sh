#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

ossh.list() {
  ossh.config.get.completion
}

ossh.install() {
  ossh.config.get.completion
}


ossh.show() {
  #sed -n -e '/Host PI/,/Host / p' .ssh/config 
  awk "/Host $1$/,/^$/" .ssh/config 
}


ossh.config.get.completion() {
    grep '^Host' ~/.ssh/config ~/.ssh/config.d/* 2>/dev/null | cut -d ' ' -f 2- | grep "^$1"
}

ossh.config.get() {                 # <sshConfigHost> <?file:\".ssh/config\">   outputs the ssh config
  local host="$1"
  if [ -n "$1" ]; then
    shift
  else
    error.log "no host was specified"
    return 1
  fi

  local file="$1"
  if [ -n "$1" ]; then
    shift
  else
    file=".ssh/config"
  fi
  echo ""
  awk "/Host $host$/,/^$/" $file 
  #grep -A "5" "Host $host$" .ssh/config 

}

ossh.config.create() {
  #set -x
  local sshConfigHost="$1"
  if [ -n "$1" ]; then
    shift
  else
    error.log "no sshConfigHost was specified"
    return 1
  fi

  local url="$1"
  if [ -n "$1" ]; then
    url="$1"
    shift
  else
    url="$USER@$(hostname):22"
  fi

  local id="$1"
  if [ -n "$1" ]; then
    id="$1"
    shift
  else
    id="~/.ssh/id_rsa"
  fi

  ossh.config.parse.url "$url"
  
}

ossh.config.parse.url() {
  local url="$1"
  local user="$( echo $url | cut -d"@" -f1  )"
  local hostAndPort="$( echo $url | cut -d"@" -f2  )"

  local hostname="$( echo $hostAndPort | cut -d":" -f1  )"
  local port="$( echo $hostAndPort | cut -d":" -f2  )"
  local id="~/.ssh/id_rsa"

  private.config.create
  
}

private.config.create() {
  {
    echo ""
    echo "Host $sshConfigHost"
    echo " User $user"
    echo " Port $port"
    echo " HostName $hostname"
    echo " IdentityFile $id"
    echo ""
  } >$CONFIG_PATH/result.txt
  ossh.config.show.last
}

ossh.config.show.last() {
  cat $CONFIG_PATH/result.txt
}

ossh.config.save.last() {
  local file="$1"
  if [ -n "$1" ]; then
    file="$1"
    shift
  else
    file=".ssh/config"
  fi
  cat $CONFIG_PATH/result.txt >>$file
  important.log "appended last config to $file"
}


ossh.help()                 # prints a list of all commands for once
{
  cat oosh/ossh | line find "\(\) " "$" | sort | line table '#'
}

ossh.test() {
  this.isSourced
  echo this.isSourced=$?
  echo "this: $this"
  echo "caller: $caller"
  echo "callerFunction: $callerFunction"
  echo "This: $This"
  #echo "this.this: $(this.this)"
}

ossh.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when there are no parameters          
      v         print version information
      init      initializes ...nothing yet

      config.get          <sshConfigHost> <?file:\".ssh/config\">   outputs the ssh config

      config.create       <sshConfigHost> <?url> <privateKey:\"~/.ssh/id_rsa\">
      config.show.last    shows \$CONFIG_PATH: $CONFIG_PATH/result.txt
      config.save.last    <?file:\".ssh/config\">

      config.parse.url    <?url> parses a url and shows a resulting config

      install             <?url> installs password free access to the user in the url 

      ----      --------------------------
  
  Examples
    $this v
    $this init

    $this config.create iMac
    $this config.create dockerSSH test@localhost:8022
    $this config.show.last
    $this config.save.last

  "
}

ossh.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

ossh.start "$@"

