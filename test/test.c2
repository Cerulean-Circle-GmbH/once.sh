#!/usr/bin/env bash
#clear
#export PS4='\e[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \e[0m'
#set -x

level=$1
if [ -z "$level" ]; then
  level=1
fi
echo "starting: ${BASH_SOURCE[@]##*/} <?LOG_LEVEL=$level>"

#echo "sourcing init"
source this
source test.suite

log.level $level

competionArray=(once config list file ite)
source oo

test.c2() 
{
((TEST_COUNTER++))
console.log "


Test 0: c2 \"$*\"
===================================================================="
c2.start "$@"
console.log "RETURN: $RETURN_VALUE  Result: $RESULT 
===================================================================="
}

# test.case - "c2 without parameter" \
#    c2 
# expect 0 "*" "Test start"


source c2

# # tesing the outout of 'c2 myId c'
# test.case - "c2 behaves like 'c2 myId c'" \
#    c2.completion.discover 1 cur myId c p1 p2
# # works

test.case - "c2 with script without parameter" \
   c2 myId 
expect 0 "*"

test.case - "c2 with full qualified script" \
   c2 /Users/Shared/dev/Workspaces/2cuGitHub/once.sh/su/setup
expect 0 "*"
# works

test.case - "c2 with script with method create" \
   c2 myId create 
expect 0 "*"
#works

 # tesing the outout of 'c2 myId c'
 test.case - "c2 behaves like 'c2 myId c'" \
    c2.completion.discover 1 cur myId c
RESULT="$(cat $CONFIG_PATH/completion.result.txt)"
expect 0 "create"


 # tesing the outout of 'c2 myId c'
 test.case - "c2 behaves like 'c2 myId create p1'" \
    c2.completion.discover 2 cur myId create p1 p2
RESULT="$(cat $CONFIG_PATH/completion.result.txt)"
expect 0 "p1"

# tesing the outout of 'c2 myId c'
test.case - "c2 behaves like 'c2 myId noop'" \
   c2 completion.discover 3 cur myId noop 

RESULT="$(cat $CONFIG_PATH/completion.result.txt)"
expect 0 ";"
# works

 # tesing the outout of 'c2 myId c'
 test.case - "c2 behaves like 'c2 myId create '" \
    c2.completion.discover 2 cur myId create 
RESULT="$(cat $CONFIG_PATH/completion.result.txt)"
expect 0 "addDefaultValue"

### test.method

