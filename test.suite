#!/bin/bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

# level=$1
# if [ -z "$level" ]; then
#   level=3
# fi
# echo "starting: $0 <LOG_LEVEL=$level>"

test.suite.discover()
{
  test.suite.run.completion
}

test.suite.run.completion() {
  ls $OOSH_DIR/test/* | sed 's/\/.*\/oosh\/test\/\(interactive.\)*test\.//' | grep "^$1"
}

test.suite.save.results()
{
  source $OOSH_DIR/config 
  config.save testresult TEST_SUITE
  #check file $CONFIG_PATH/testresult.env exists;
  #expect 0 "*" "$CONFIG_PATH/testresult.env exists"
}

test.suite.init()
{
  source this

  if [ -z "$TEST_COUNTER" ]; then
    declare -i TEST_SUITE_TEST_COUNTER=0
    declare -i TEST_SUITE_EXPECT_COUNTER=0
    declare -i TEST_SUITE_SUCCESS_COUNTER=0
    export SUITE_RESULT="Suite Resut: "
  fi

  if (this.isSourced); then
    debug.log "test.suite sourced"
    if [ "$2" = "clear" ]; then
      clear
    fi
    export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
    #set -x
  else
    #important.log "test.suite started"
    this.start "$@"
  fi
} 

test.suite.run()
{
  local command=$1
  shift
  local level=$1
  shift
  local clear=$1
  shift

  if [ -z "$level" ]; then
    level=1
  fi
  
  if [ "$level" -gt 0 ]; then
    $OOSH_DIR/test/test.$command $level $clear
  else
    $OOSH_DIR/test/test.$command $level $clear >/dev/null
  fi

  if check file $CONFIG_PATH/testresult.env exists; then 
    source $CONFIG_PATH/testresult.env
  fi
  console.log "========================================================================================
  test suite done with: $OOSH_DIR/test/test.$command $*"
  console.log "========================================================================================
  \033[1;32m$TEST_SUITE_SUCCESS_COUNTER\033[0m / $TEST_SUITE_EXPECT_COUNTER expects on $TEST_SUITE_TEST_COUNTER Test Cases
  "
  if [ "$TEST_SUITE_SUCCESS_COUNTER" -eq "$TEST_SUITE_EXPECT_COUNTER" ]; then
    success.log "All tests successfull"
    return 0
  else
    error.log "Some tests failed"
    return 1
  fi
}

test.suite.all()
{
  local level=$1
  shift
  local clear=$1
  shift

  for file in $OOSH_DIR/test/test.*
    do
      #if [ "$LOG_LEVEL" -gt 2 ]; then
        stop.log "test.suite about to run: $file $level $clear"  
      #fi
      if [ "$LOG_LEVEL" -gt 0 ]; then
        $file $level $clear
      else
        $file $level $clear >/dev/null
      fi

      if check file $CONFIG_PATH/testresult.env exists; then 
        source $CONFIG_PATH/testresult.env
      fi
      console.log "========================================================================================
      test suite done with: $OOSH_DIR/test/test.$command $*"
      console.log "========================================================================================
      \033[1;32m$TEST_SUITE_SUCCESS_COUNTER\033[0m / $TEST_SUITE_EXPECT_COUNTER expects on $TEST_SUITE_TEST_COUNTER Test Cases
      "
      if [ "$TEST_SUITE_SUCCESS_COUNTER" -eq "$TEST_SUITE_SUCCESS_COUNTER" ]; then
        success.log "All tests successfull"
      else
        error.log "Some tests failed"
        return 1
      fi
    done
}

test.case() 
{
  ((TEST_SUITE_TEST_COUNTER++))

  local level=$1
  shift
  # if ! [ "$level" = "-" ]; then
  #   this.call log.level $level
  # fi
  export testName=$1
  shift
  local testFunction="$1"
  shift
  local testArguments="$@"

  if ! [ "$level" = "-" ]; then
    log.level $level
  fi

console.log "

Test $TEST_COUNTER: $testName
= log level $LOG_LEVEL ======================================================"
  important.log "testing: $testFunction $testArguments"
  if [ "$LOG_LEVEL" -gt "1" ]; then
    $testFunction $testArguments
    RETURN_VALUE=$?
  else
    {
      $testFunction $testArguments
      RETURN_VALUE=$?
    } >/dev/null
  fi
if [ "$RETURN_VALUE" -gt 0 ]; then 
  onError
fi
console.log "RETURN: $RETURN_VALUE  Result: $RESULT 
===================================================================="
    #log.level reset
}

expect()
{
  ((TEST_SUITE_EXPECT_COUNTER++))
  info.log "$SUITE_RESULT"
  let EXPECTED_RETURN_VALUE=$1
  shift
  local expectedresult="$1"
  shift
  local message="$1"
  shift

  declare -i rv=$RETURN_VALUE

  if [ -z "$message" ]; then
    message=$testName
  fi
  #info.log "Testing $TEST_COUNTER: $testcase"
  #$testcase >/dev/null

  if [ "$expectedresult" = "*" ]; then
    expectedresult=$RESULT
  fi 

  if [ "$EXPECTED_RETURN_VALUE" = "*" ]; then
    EXPECTED_RETURN_VALUE=$RETURN_VALUE
  fi 

  if [ "$EXPECTED_RETURN_VALUE" -eq $rv ] && [ "$RESULT" = "$expectedresult" ]; then
    ((TEST_SUITE_SUCCESS_COUNTER++))
    test.success.log "success on testcase $TEST_COUNTER: $testcase $message"
  else
    error.log "error on testcase $TEST_COUNTER: $testcase $message"
    error.details.log "expected $EXPECTED_RETURN_VALUE but got $RETURN_VALUE"
    error.details.log "expected result: $expectedresult"
    error.details.log "        but got: $RESULT"

  fi
  TEST_SUITE_RESULT="\033[1;32m$SUCCESS_COUNTER\033[0m / $EXPECT_COUNTER expects on $TEST_COUNTER Tests"

}

test.suite.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  current log level: $LOG_LEVEL
  
  current file: $CONFIG
   CONFIG_PATH=$CONFIG_PATH
   CONFIG_FILE=$CONFIG_FILE


  Usage:
  $this: command   description and Parameter
      all       tests all tests in $OOSH_DIR/test 
                $this all <log level>  <?clear>
      run       runs a single test: $OOSH_DIR/test/test.<command>
                $this <command> <log level>  <?clear>      

  
  Examples
    $this run loop 5
    $this all 1 clear
  "
  
  #loop.list PATH print '---------------------: '
}

test.suite.init "$@"
