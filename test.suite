#!/bin/bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

# level=$1
# if [ -z "$level" ]; then
#   level=3
# fi
# echo "starting: $0 <LOG_LEVEL=$level>"



test.suite.init()
{
  source init
  if [ -z "$TEST_COUNTER" ]; then
    declare -i TEST_COUNTER=0
  fi

  if (this.isSourced); then
    debug.log "test.suite sourced"
    if [ "$2" = "clear" ]; then
      clear
    fi
    export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
    #set -x
  else
    important.log "test.suite started"
    this.start "$@"
  fi
} 

test.suite.run()
{
  local command=$1
  shift
  $OOSH_PATH/test/test.$command "$@"
  echo "========================================================================================
  test suite done with: $OOSH_PATH/test/test.$command $*"
  echo "========================================================================================
  
  
  "

}

test.suite.all()
{
  local level=$1
  shift

  for file in $OOSH_PATH/test/test.*
    do
      #if [ "$LOG_LEVEL" -gt 2 ]; then
      #  problem.log "test.suite about to run: $file $level $2"  
      #fi
      $file "$@"
      echo "========================================================================================
      test suite done with: $OOSH_PATH/test/test.$command $*"
      echo "========================================================================================
      
      
      "
    done
}

test.case() 
{
  ((TEST_COUNTER++))

  local level=$1
  shift
  # if ! [ "$level" = "-" ]; then
  #   this.call log.level $level
  # fi
  export testName=$1
  shift
  local testFunction="$1"
  shift
  local testArguments="$@"

  if ! [ "$level" = "-" ]; then
    log.level $level
  fi

console.log "

Test $TEST_COUNTER: $testName
= log level $LOG_LEVEL ======================================================"
  important.log "testing: $testFunction $testArguments"
  if [ "$LOG_LEVEL" -gt "1" ]; then
    $testFunction $testArguments
    RETURN_VALUE=$?
  else
    {
      $testFunction $testArguments
      RETURN_VALUE=$?
    } >/dev/null
  fi
if [ "$RETURN_VALUE" -gt 0 ]; then 
  onError
fi
console.log "RETURN: $RETURN_VALUE  Result: $RESULT 
===================================================================="
    #log.level reset
}

expect()
{
  export EXPECTED_RETURN_VALUE="$1"
  shift
  local expectedresult="$1"
  shift
  local message="$1"
  shift

  if [ -z "$message" ]; then
    message=$testName
  fi
  #info.log "Testing $TEST_COUNTER: $testcase"
  #$testcase >/dev/null

  if [ "$expectedresult" = "*" ]; then
    expectedresult=$RESULT
  fi 

  if [ "$EXPECTED_RETURN_VALUE" = "*" ]; then
    EXPECTED_RETURN_VALUE=$RETURN_VALUE
  fi 

  if [ "$EXPECTED_RETURN_VALUE" -eq "$RETURN_VALUE" ] && [ "$RESULT" = "$expectedresult" ]; then
    test.success.log "success on testcase $TEST_COUNTER: $testcase $message"
  else
    error.log "error on testcase $TEST_COUNTER: $testcase $message"
    error.details.log "expected $EXPECTED_RETURN_VALUE but got $RETURN_VALUE"
    error.details.log "expected result: $expectedresult"
    error.details.log "        but got: $RESULT"

  fi
}

test.suite.init "$@"