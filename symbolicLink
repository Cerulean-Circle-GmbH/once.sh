#!/usr/bin/env bash
#clear
#export PS4='\e[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \e[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

symbolicLink.create()     # <sourcePath> for <?user1> <?user2>... # A symbolic link is created to the given users' home directory or all users' home directory of the given path+directory # an example
{
  symLinkMode="create"
  sourcePath="$1"
  if [ -n "$sourcePath" ]; then
    shift
    info.log "sourcePath is set to $sourcePath"
  else
    create.result 1 "Source path missing. Using: $sourcePath"
    exit "$(result)"
  fi

  if check dir "$sourcePath" not exists
  then
    create.result 1 "$sourcePath does not exist"
    echo "$sourcePath does not exist"
    exit "$(result)"
  fi
  
  debug.log "create"
  RETURN=$1
}

symbolicLink.delete()     # <linkPath> for <?user1> <?user2>... # A symbolic link is created to the given users' home directory or all users' home directory of the given path+directory # an example
{
  symLinkMode="delete"
  linkPath="$1"
  if [ -n "$linkPath" ]; then
    shift
    info.log "linkPath is set to $linkPath"
  else
    create.result 1 "Source path missing. Using: $linkPath"
    exit "$(result)"
  fi
  
  debug.log "delete"
  RETURN=$1
}

symbolicLink.users() # #
{
  local thePath
  if [ $symLinkMode = "create" ]; then
    thePath=$sourcePath
  fi
  if [ $symLinkMode = "delete" ]; then
    thePath=$linkPath
  fi

  if [ -n "$all" ]; then
    allUsers=$(getent passwd | awk -F: '$3>999 && $3 <5000{print $1}')
    if [ -z $targetDir ]; then
      if [ -z $called ]; then
        if [ -z $group ]; then
          symbolicLink $symLinkMode $thePath users $allUsers
        else
          symbolicLink $symLinkMode $thePath group $group users $allUsers
        fi
      else
        if [ -z $group ]; then
          symbolicLink $symLinkMode $thePath called $called users $allUsers
        else
          symbolicLink $symLinkMode $thePath called $called group $group users $allUsers
        fi
      fi
    else
      if [ -z $called ]; then
        if [ -z $group ]; then
          symbolicLink $symLinkMode $thePath at $targetDir users $allUsers
        else
          symbolicLink $symLinkMode $thePath at $targetDir group $group users $allUsers
        fi
      else
        if [ -z $group ]; then
          symbolicLink $symLinkMode $thePath at $targetDir called $called users $allUsers
        else
          symbolicLink $symLinkMode $thePath at $targetDir called $called group $group users $allUsers
        fi
      fi
    fi
  else
    local user="$1"
    if [ -z "$user" ]; then 
      user="$(whoami)"
    fi

    while [ -n "$user"  ];
    do
      if check user $user exists fix error.log "$user is not a user"
      then
        info.log "user is set to $user"

        if [ $symLinkMode = "delete" ]; then
          if [[ ! $thePath =~ "home/$user" ]]; then
            thePath="$thePath"
          elif [[ ! $thePath =~ "users/$user" ]]; then
            thePath="/users/$user$thePath"
          fi
          if check dir $thePath not exists
          then
            create.result 1 "$thePath does not exist for user $user"
            echo "$thePath does not exist for user $user"
          else
            sudo rm -R "$thePath"
          fi
        fi

        if [ $symLinkMode = "create" ]; then

          IFS='/'
          read -ra parts <<< "$thePath"
          iAmount=${#parts[*]}
          lastDir=${parts[iAmount-1]}

          if [[ -z $called ]]; then
            if [ -z $targetDir ]; then
              targetDir="$lastDir"
            fi
          elif [[ -z $targetDir ]]; then
            targetDir="$called"
          fi
          # elif [ -n $targetDir ];
          # then
          #   targetDir="${thePath%\/*}/$called"

          if [[ ! ${thePath::1} == "/" ]]; then
            targetDir="/$targetDir"
          fi

          local target
          if check dir /home exists
          then
            target="/home/$user"
          elif chek dir /users exists
          then
            target="/users/$user"
          fi

          if [[ $targetDir != $called && $targetDir != $lastDir ]]; then
            sudo mkdir -p "$target$targetDir"
            sudo setfacl -R -m u:$user:rwx "$target$targetDir"
            target="$target$targetDir"
          fi
          
          sudo ln -s -i "$thePath" --target-directory="$target"
          sudo mv "$target/$lastDir" "$target/$called"
          if [ -n $group ];then
            sudo groupadd $group
          else
            sudo groupadd $lastDir
          fi
          sudo useradd -m -g $lastDir $USER
          sudo chgrp -R $lastDir "$target/$called"
          #sudo chown -r $user "$target$called"
          sudo setfacl -R -m u:$user:rwx "$target/$called"
          create.result 0 "thePath is link to $user"
        fi
      fi
      shift
      user="$1"
    done
  fi

  return $(result)
}

symbolicLink.for() { # <mode:users> # createLink for either specific user(s) or all users
  debug.log "for"
  RETURN=$1
}

symbolicLink.for.completion.mode() { # #
  echo "all"
  echo "users"
}

symbolicLink.all() { # <mode:users> # createLink for all users
  all=true
  RETURN=$1
}

symbolicLink.all.completion.mode() { #  #
  echo "users"
}

symbolicLink.at() { # <mode:destination> # set the destination where the symbolic link should go
  targetDir="$1"
  shift
  RETURN=$1
}

symbolicLink.at.completion.mode() { #  #
  echo "destination folder"
}

symbolicLink.called() { # <mode:name> # state the name of the symbolic link
  called="$1"
  shift
  RETURN=$1
}

symbolicLink.called.completion.mode() { #  #
  echo "symbolic link name"
}

symbolicLink.in() { #  #
  debug.log "in"
  RETURN=$1
}

symbolicLink.in.completion.mode() { # #
  echo "group"
}

symbolicLink.group() { # <mode:group> # the name of the group the user should be added
  group="$1"
  shift
  RETURN=$1
}

symbolicLink.group.completion.mode() { #  #
  echo "user group to add symbolic link"
}

### new.method

symbolicLink.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  symbolicLink manages symbolic links, with the following properties:
    1. create a symbolic link with the necessary parameters
    2. delete a symbolic link with the necessary parameters

  Usage:
  $this: command   Parameter and Description"
  this.help
  echo "
  
  Examples
    $this v
    $this init
    $this create /var/dev for users snet shiftAdmin
    $this create /var/dev at ~/ for users snet shiftAdmin
    $this create /var/dev called oosh in group dev for all users
    $this create /var/dev at ~/tmp called oosh in group dev for all users
    $this create /var/dev for all users
    $this delete /var/dev for users snet shiftAdmin
    $this delete /var/dev for all users
    ----------
  "
}

symbolicLink.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

symbolicLink.start "$@"

