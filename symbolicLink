#!/usr/bin/env bash
#clear
#export PS4='\e[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \e[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

symbolicLink.create()     # <sourcePath> for <?user1> <?user2>... # A symbolic link is created to the given users' home directory or all users' home directory of the given path+directory # an example
{
  sourcePath="$1"
  if [ -n "$sourcePath" ]; then
    shift
    info.log "sourcePath is set to $sourcePath"
  else
    create.result 1 "Source path missing. Using: $sourcePath"
    exit "$(result)"
  fi

  if check dir "$sourcePath" not exists
  then
    create.result 1 "$sourcePath does not exist"
    echo "$sourcePath does not exist"
    exit "$(result)"
  fi
  
  debug.log "create"
  RETURN=$1
}

symbolicLink.users() # #
{  
  if [ -n "$all" ]; then
    allUsers=$(getent passwd | awk -F: '$3==0 || $3>999 && $3 <5000{print $1}')
    symbolicLink create $sourcePath users $allUsers
  else
    local user="$1"
    if [ -z "$user" ]; then 
      user="$(whoami)"
    fi

    if [ -z $targetDir ]; then
      targetDir="${sourcePath%\/*}"
    fi

    if [[ ${sourcePath::1} == "/" ]]; then
      targetDir="${targetDir/\/}"
    fi

    while [ -n "$user"  ];
    do
      if check user $user exists fix error.log "$user is not a user"
      then
        info.log "user is set to $user"        
        
        if [ $(id -u "$(whoami)") -eq 0 -o "$user" = "root" ]; then
          if [ $(whoami) = "$user" ]; then
            if check dir "/$user" exists
            then
              mkdir -p "/$user/$targetDir"
              ln -s "/$sourcePath" --target-directory="/$user/$targetDir"
            else
              mkdir -p "/$targetDir"
              ln -s "/$sourcePath" --target-directory="/$targetDir"
            fi
          else
            sudo mkdir -p "/$user/$targetDir"
            sudo ln -s "/$sourcePath" --target-directory="/$user/$targetDir"
          fi
        else          
          mkdir -p "/home/$user/$targetDir"
          sudo ln -s "/$sourcePath" --target-directory="/home/$user/$targetDir"
        fi
        sudo setfacl -R -m u:$user:rwx "/$sourcePath"
        create.result 0 "sourcePath is link to $user"
      fi
      shift
      user="$1"
    done
  fi

  return $(result)
}

symbolicLink.for() { # <mode:users> # createLink for either specific user(s) or all users
  debug.log "for"
  RETURN=$1
}

symbolicLink.for.completion.mode() { # #
  echo "all"
  echo "users"
}

symbolicLink.all() { # <mode:users> # createLink for all users
  all=true
  RETURN=$1
}

symbolicLink.all.completion.mode() { #  #
  echo "users"
}

symbolicLink.at() { # <mode:destination> # set the destination where the symbolic link should go
  targetDir="$1"
  shift
  RETURN=$1
}

symbolicLink.at.completion.mode() { #  #
  echo "destination folder"
}

### new.method

symbolicLink.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  symbolicLink manages symbolic links, with the following properties:
    1. create a symbolic link with the necessary parameters
    2.

  Usage:
  $this: command   Parameter and Description"
  this.help
  echo "
  
  Examples
    $this v
    $this init
    $this create '/var/dev' for users 'snet' 'shiftAdmin'
    $this create '/var/dev' at '/' for users 'snet' 'shiftAdmin'
    $this create '/var/dev' for all users
    ----------
  "
}

symbolicLink.start()
{
  #echo "sourcing init"
  source this

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

symbolicLink.start "$@"

