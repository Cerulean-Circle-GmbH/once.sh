#!/bin/bash
# echo "entering: ${BASH_SOURCE[0]}"
# echo "remove all echos to preseve output"
# echo ""

export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

if [ -z "$LOG_LEVEL" ]; then
  export LOG_LEVEL=3
fi

if [ -z "$EXPECTED_RETURN_VALUE" ]; then
  export EXPECTED_RETURN_VALUE=1
fi

if [ "$EXPECTED_RETURN_VALUE" -lt 1 ]; then
  export EXPECTED_RETURN_VALUE=1
fi

if [ -z "$OOSH_DIR" ]; then
  OOSH_DIR=$(dirname "$(which $0)")
  if [ "$OOSH_DIR" = "." ]; then
    OOSH_DIR=$(pwd)
  fi
  if [ "$OOSH_DIR" = "/root/init" ]; then
    OOSH_DIR="/root/oosh"
  fi
  PATH="$OOSH_DIR:$PATH"
fi

info.log() {
  if [ "$LOG_LEVEL" -gt "3" ]; then
    echo -e "\033[0mINFO> $*" ## normal
  fi
}

this.isNumber() {
  case $1 in
  '' | *[!0-9]*) return 1 ;;
  *) return 0 ;;
  esac
}

this.functionExists() {

  local startFunc="$1"
  shift
  RETURN=$1

  if [ "$(type -t $startFunc)" = "function" ]; then
    info.log "$startFunc exists"
    return 0
  else
    info.log "$startFunc does not exist"
    return 1
  fi
} 2>/dev/null

if (this.functionExists this.load); then
  info.log "this was already sourced"
  return 0
fi

this.load() {
  local aFunction=$1
  shift
  local aShellScript=$1
  shift

  if [ -z "$aShellScript" ]; then
    error.log "No script name provided!"
    return 1
  fi

  if (this.functionExists $aShellScript.$aFunction); then
    info.log "$aShellScript was already sourced"
  else
    #echo "sourcing $aShellScript $aShellScript.$aFunction $@"
    source $aShellScript
  fi
  $aShellScript.$aFunction "$@"
  #stop.log "loaded and executed $aShellScript.$aFunction"
  RETURN=$1
  return "$(result save)"
}

check.debug.level() {
  if [ -n "$1" ]; then
    log.level $1
  fi

  if [ "$LOG_LEVEL" -gt "6" ]; then
    info.log "step Debug ON"
    export STEP_DEBUG=ON
  else
    export STEP_DEBUG=OFF
  fi

  if [ "$LOG_LEVEL" -gt "5" ]; then
    export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
    set -x
  else
    {
      set +x
    } 2>/dev/null
  fi
  #set -x
} #2>/dev/null

if ! [ "$(type -t debug.v)" = "function" ]; then
  #LOG_LEVEL=6
  source $OOSH_DIR/debug
fi

this.init() {
  info.log "inititlized"
  #does not work on mac osx. readlink does not have option -f on mac
  #local initStartPath=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
  local initStartPath=$(dirname "${BASH_SOURCE[0]}")
  let shellLevel=$SHLVL-1
  let ooShellLevel=$SHLVL+2
  #echo initStartPath $initStartPath

  # if (loop list PATH find $initStartPath); then
  #   loop list PATH rm $initStartPath
  # fi
  #export PATH=$initStartPath:$PATH

  #export PS1="[oosh $ONCE_SSH_CONFIG_HOST] $PS1"
  if ! [ "${0##*/}" = "config" ]; then
    if [ -f "$CONFIG" ]; then
      source "$CONFIG"
    fi
  fi
  if [ -z "$OOSH_PROMPT" ]; then
    export OOSH_STATUS="0: started in shell level: $shellLevel"
    export OOSH_DIR="$initStartPath"
    export OOSH_SHLVL=$ooShellLevel
    export OOSH_PROMPT="oosh "
    export ERROR_CODE_RECONFIG=7
    export OOSH_CONFIG_NEEDS_SAVE=~/config/user.env
  fi
}

create.result() {
  RETURN_VALUE=$1
  shift
  RESULT=$1
  shift
  RETURN=$1
  


  if ! (this.isNumber "$RETURN_VALUE"); then
    export RESULT=$RETURN_VALUE
    RETURN_VALUE=0
  fi
  
  info.log "create.result: $RETURN_VALUE $RESULT"
  if [ "$RETURN" = "save" ]; then    
    shift
    RETURN=$1
    result.save "$@"
    info.log "result saved"
  fi
  debug.log "next argument: $RETURN"
  
}

result() {
  if [ "$1" = "save" ]; then    
    shift
    result.save "$@"
    RETURN=$1
  fi
  echo $RETURN_VALUE
}

result.save()
{
  export RESULT_RETURN_VALUE=$RETURN_VALUE
  export RESULT=$RESULT

  export RESULT_DATE="$(date)"
  export RESULT_CALLER="${FUNCNAME[2]}"
  export RESULT_CALL_STACK="${FUNCNAME[@]}"
  export RESULT_SOURCE_STACK="${BASH_SOURCE[@]##*/}"
  export RESULT_NEXT_ARGS="$*"
  {
    declare -px | grep "RESULT"
  } >$CONFIG_PATH/result.env
}

result.load()
{
  source $CONFIG_PATH/result.env
}

this.scope() {
  declare -p
  declare -f | grep "^[^ ]* ()" | cut -d ' ' -f1
}

this.scope.full() {
  declare -p
  this.scope
}

this.absolutePath() {
  local file=$1
  shift

  if [ -z "$file" ]; then
    file="$0"
  fi

  resoleved_link=$(readlink ${file})
  if [ -z "$resoleved_link" ]; then
    resoleved_link="$file"
  fi
  resoleved_link=$(readlink -f ${file})
  if [ -z "$resoleved_link" ]; then
    resoleved_link="$file"
  fi
  #create.result "$(dirname $(pwd)/${file#./})" "$1"
  create.result "$(dirname ${resoleved_link})" "$1"
}

this() {
  create.result "${0##*/}" "$1"
}

this.caller() {
  local len=${#BASH_LINENO[@]}
  local caller=${BASH_SOURCE[2]##*/}
  info.log "script: $0"
  info.log "caller: $caller"
  info.log "source stack: ${BASH_SOURCE[*]##*/}"
  create.result "$caller" "$1" 
}

this.caller.function() {
  local function=${FUNCNAME[1]}
  info.log "function stack: ${FUNCNAME[*]}"
  create.result "$function" "$1" 
}

this.call() {
  local aFunction=$1
  shift

  local len=${#BASH_LINENO[@]}
  local caller=${BASH_SOURCE[$len - 2]##*/}
  #info.log "stack : ${BASH_SOURCE[@]}"
  info.log "script: $0"
  info.log "caller: $caller"

  if (this.functionExists $aFunction); then
    debug.log "this.call: $aFunction $*"
    $aFunction "$@"
    return "$?"
  else
    info.log "$aFunction does not exist!"
  fi

  if (this.functionExists $caller.$aFunction); then
    debug.log "this.call: $caller.$aFunction $*"
    $caller.$aFunction "$@"
  else
    info.log "$caller.$aFunction does not exist!"
    local aShellScript=$aFunction
    aFunction=$1
    shift

    info.log "aShellScript: $aShellScript"
    info.log "aFunction: $aFunction"
    info.log "next parameter \$1: $1"

    if (this.functionExists $aFunction); then
      debug.log "this.call: $aFunction $* "
      stop.log "$aFunction $*"
      $aFunction "$@"
    else
      debug.log "this.load: $aFunction $aShellScript"
      if (this.load $aFunction $aShellScript "$@"); then
        debug.log "done this.call: $aShellScript.$aFunction $*"
        #$aShellScript.$aFunction "$@"
      else
        error.log "this.load faild to load $aShellScript from \"$aFunction\""
        return 127
      fi
    fi
  fi
} #2>/dev/null

this.start() {
  if (this.isSourced); then
    debug.log "is sourced"
    export RESTULT
    return 0
  fi

  if [ -z "$1" ]; then
    local len=${#BASH_LINENO[@]}
    local caller=${BASH_SOURCE[$len - 2]##*/}

    if (this.functionExists $caller.usage); then
      $caller.usage
    else
      console.log "$0: no parameter: Bye"
    fi
  fi

  while [ -n $1 ]; do
    debug.log "start 1: -$1-"
    case $1 in
    # call)
    #   shift
    #   "$@"
    #   ;;
    # discover)
    #   once.discover
    #   if [ "$ONCE_STATE" = "disvocer" ]; then
    #     ONCE_STATE=check.installation
    #     once.stage
    #   fi
    #   ;;
    start)
      stop.log "once start"
      once.server.start "$@"
      ;;
    '')
      debug.log "$0: EXIT"
      #exit 0
      return
      ;;
    *)
      debug.log "this.call to: $*"
      this.call "$@"
      ;;
    esac

    shift

    while [ ! "$RETURN" = "$1" ]; do
      shift
      debug.log "shift:  -Return:$RETURN-  -$1- -command=$COMMANDS-  =$*="
      if [ -z "$1" ]; then
        debug.log "force stop"
        RETURN=
        exit $RETURN_VALUE
      fi
    done
    debug.log "found RETURN=$1"
    RETURN=$2

  done
  debug.log "will stage"
  this.call "$@"
  
  return $RETURN_VALUE
}

path.add() {
  RESULT=$PATH
  if (loop.list PATH find "$1" silent); then
    debug.log "found $1 at $RESULT"
    loop.list PATH rm $1 silent
    debug.log "PATH=$1:$RESULT"
  fi
  export PATH=$1:$RESULT
}


this.isSourced() {
  # test.isSourced this.isSourced \ this.isSourced main                                               => called by main            and started
  # init this.isSourced           \ this.isSourced main                                               => called by main            and started
  # this.call this.isSourced      \ this.isSourced this.call main                                     => called by this.call       and sourced
  # test.case source              \ this.isSourced this.start mycmd.start source test.case main       => called by this.start      and sourced from test.case
  # mycmd.feature3 hello world    \ this.isSourced mycmd.feature3 test.case main                      => called by mycmd.feature3

  caller=${BASH_SOURCE[1]##*/}
  callerFunction=${FUNCNAME[1]}

  case $callerFunction in
  "main") #started
    create.result 1 "started by $callerFunction in $caller"
    ;;
  "this.call") #called therfore sourced
    create.result 0 "sourced because called by $callerFunction in $caller"
    ;;
  "this.start") #started depending on command [3]
    if [ "${FUNCNAME[3]}" = "source" ]; then
      create.result 0 "sourced because called by $callerFunction in $caller" >/dev/null
    else
      create.result 1 "started by ${FUNCNAME[4]} in ${BASH_SOURCE[4]##*/}" >/dev/null
    fi
    ;;
  *) #called therfore sourced
    if [ "${0##*/}" = "$caller" ]; then
      create.result 1 "started because $caller is $0" >/dev/null
    else
      create.result 0 "sourced because called by $callerFunction in $caller" >/dev/null
    fi
  esac
  return $(result)
}

info.log "
still in ${BASH_SOURCE[0]##*/}
"
#set -x

this.init



case "${0##*/}" in
  "init"|"oosh"|"log"|"this")
    source $OOSH_DIR/loop
    #LOG_LEVEL=6
    path.add "."
    path.add "$OOSH_DIR"

    if [ -n "$OOSH_CONFIG_NEEDS_SAVE" ]; then
      unset OOSH_CONFIG_NEEDS_SAVE
      source $OOSH_DIR/config 
      config.save
    fi
  ;;
  "config"|"loop")
    info.log "  running ${0##*/}"
  ;;
  *)
    info.log "  running unknown ${0##*/}"
  ;;
esac





if (this.isSourced); then
  info.log "this was sourced"

else
  echo "this was started as $0" 
  config ci
  echo running bash with 
  echo  OOSH_DIR=$OOSH_DIR
  echo      PATH=$PATH
  echo BASH_FILE=$BASH_FILE
  $OOSH_DIR/this
fi
