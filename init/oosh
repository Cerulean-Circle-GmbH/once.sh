#!/bin/sh
#http://www.etalabs.net/sh_tricks.html

# find all set -x
#  '^ *[^#] *set -x'
#set -x # force debug

#unset SHELL
oosh_get_running_shell() 
{
  #SHELLNAME="$(ps -o pid,args | grep "\w*$$ [^g]*sh" | awk '{$1=$1};1' | cut -d\  -f2 | sed s/-//)"
  SHELLPS="$(ps -o pid,args | grep "\w*$$ [^g]*/sh")"
  SHELL=$(which "$SHELLNAME")
}

log()
{
  if [ "$LOG_LEVEL" -gt 4 ]; then
    echo "$@"
  fi
} 

oosh_check_pm()             # checks for a package manager
{
    packageManager=$1
    packageManagerCommand=$2


    if [ -z "$packageManagerCommand" ]; then
        package=$packageManager
    fi   
    if ! [ -x "$(command -v $packageManagerCommand)" ]; then
        log "no $packageManagerCommand"
    else
        if [ -z "$OOSH_PM" ]; then
            export OOSH_PM="$packageManagerCommand"
            #export groupAddCommand=$2
            #export userAddCommand=$3
            log "Package Manager found: using $OOSH_PM somePackage"
            if [ "$packageManager" = "apt-get" ]; then
                if [ -z "$OOSH_PM_UPDATED" ]; then
                  OOSH_PM_UPDATED="apt-get update"
                  if [ ~ = /root ]; then
                    $OOSH_PM_UPDATED
                  else
                    #sudo $OOSH_PM_UPDATED
                    PM="sudo $PM"
                  fi
                else
                  log "in case of installation errors try to call: apt-get update"
                fi
            fi
        fi
    fi
}

oosh_check_all_pm()         # adds tools and configurations to package manager (brew, apt-get, addgroup, adduser, dpkg, pkg)
{

    oosh_check_pm brew "brew install"    
   #oosh_check_pm apt "apt add"
    oosh_check_pm apt-get "apt-get -y install" "groupadd -f" "useradd -g dev"
    oosh_check_pm apk "apk add" "addgroup" "adduser -g dev"
    oosh_check_pm dpkg "dpkg install"
    oosh_check_pm pkg "pkg install"
    oosh_check_pm pacman "pacman -S"
 
}

oosh_cmd() 
{
    unset package
    current=$1
    shift
    if [ -n "$1" ]; then
      package=$1
      shift
    fi
    if [ -z "$package" ]; then
        package=$current
    else
      shift
      package=$1
    fi   
    
    if [ -z "$OOSH_PM" ]; then
      console.log "no PM found...checking" 
      oosh_check_all_pm
    fi
    if ! [ -x "$(command -v $current)" ]; then
        echo "no $current"
        if [ -n "$OOSH_PM" ]; then
          $OOSH_PM $package
        else
          echo "still no PM found: $OOSH_PM $package"
        fi
    # else
    #   echo "command $current exists"
    fi
}

oosh_install_oosh()
{

  oosh_cmd git
  cd ~
  if [ -z "$OOSH_DIR" ]; then
    OOSH_DIR="$(pwd)/oosh"
  fi


  if ! [ -d "$OOSH_DIR" ]; then
    #set -x # force debug
    git clone https://github.com/Cerulean-Circle-GmbH/once.sh.git
    if [ -f ./oosh ]; then
      mkdir -p ./init
      mv ./oosh ./init
      chmod +x ./init/oosh
    fi
    mv ./once.sh ./oosh
    cp -r ~/oosh/init/* ~/init
    
    ### temporary for testing
    cd "$OOSH_DIR"
    git checkout -t origin/test/windows
    ###
  else
    cd "$OOSH_DIR"
    git pull
    cd ..
  fi
}

oosh_status()
{
  echo "
  SHELL: $SHELL
       : $SHELLNAME
       : $SHELLPS
    PWD: $(pwd)
      0: $0

     PM: $OOSH_PM
         $OOSH_PM_UPDATED 

   BASH: $BASH_FILE
      v: $BASH_MAJOR_VERSION

   PATH: $PATH
  "
}

oosh_parse_shellps() 
{
  if [ -n "$1" ]; then
    shell_pid=$1
    shift
  fi
  script=$1
  shell=$1
  if [ "$(echo $script | cut -c 1)" = "{" ]; then
    #echo script=$script
    shift
    shell=$1
  else
    #echo shell=$script
    shell=$script
    script=$2
  fi
  this=$2

  log " 
    shell: $shell
      pid: $shell_pid
   script: $script
     this: $this
  "
  SHELL=$shell

}


oosh_start() 
{
  PATH=.:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
  if [ -n "$1" ]; then
    echo "got parameters: $@"
    while [ -n $1 ]; do
      case $1 in
        mode)
          shift
          INSTALL_MODE="$1"
        ;;
        *)
          info.log "this.call to: $*"
          #this.call "$@"
      esac
    done
    return 0 
  fi

  if [ -z "$LOG_LEVEL" ]; then
    LOG_LEVEL=3
  fi
  if [ -d /root ]; then
    cd /root
  fi
  #export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
  oosh_get_running_shell
  oosh_parse_shellps $SHELLPS
  SHELLNAME=$(basename $SHELL)
  BASH_FILE=$(which bash)
  if [ -n "$BASH_FILE" ]; then
    echo BASH_MAJOR_VERSION=$("$BASH_FILE" -c "echo \"\${BASH_VERSINFO[0]}\"")
    BASH_MAJOR_VERSION=$("$BASH_FILE" -c "echo \"\${BASH_VERSINFO[0]}\"")
  fi

  oosh_check_all_pm
  PATH=~/init:$OOSH_DIR:$PATH
  oosh_status
  oosh_install_oosh

  #set

  if [ "$INSTALL_MODE" = "ssh" ]; then
    "$BASH_FILE" "$OOSH_DIR"/ossh continue.local.install
  fi

  if [ "$SHELLNAME" = "bash" ]; then
    echo "BASH Version: $BASH_VERSION[@]"
  else
    echo "not in bash: bash is in $BASH_FILE"
    if [ -n "$BASH_FILE" ]; then
      echo "starting bash $OOSH_DIR/this"
      "$BASH_FILE" "$OOSH_DIR"/this
    else
      oosh_cmd bash
      export BASH_FILE=$(which bash)
      echo "starting bash $OOSH_DIR/this"
      "$BASH_FILE" "$OOSH_DIR"/this  
    fi
  fi
}

oosh_start "$@"

