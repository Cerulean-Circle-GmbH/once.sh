#!/bin/bash

# echo "entering: ${BASH_SOURCE[0]}"
# echo "remove all echos to preseve output"
# echo ""

this.functionExists()
{

  local startFunc="$1"
  shift
  RETURN=$1

  if [ "$(type -t $startFunc)" = "function" ]; then
    #info.log "$startFunc exists"
    return 0
  else
    #info.log "$startFunc does not exist"
    return 1
  fi  
} 2>/dev/null

this.load() 
{
  local aFunction=$1
  shift
  local aShellScript=$1
  shift

  if (this.functionExists $aFunction) ; then
    debug.log "$aShellScript was already sourced"
  else
    source $aShellScript $aFunction
  fi
  RETURN=$1
}

if (this.functionExists this.init) ; then
  if (this.functionExists info.log) ; then
    info.log "init was already sourced"
  fi
  return 0
fi

this.init()
{
  info.log "inititlized"
  local initStartPath=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
  #echo initStartPath $initStartPath
  export PATH=$initStartPath:$PATH
  #loop list PATH
}
this.load step debug

this.absolutePath()
{
  local file=$1
  shift 

  if [ -z "$file" ]; then
    file="$0"
  fi

  result "$(dirname $(readlink -f $file))" "$1"
}

this()
{
  result "${0##*/}" "$1"
}

this.caller()
{
  local len=${#BASH_LINENO[@]}
  local caller=${BASH_SOURCE[$len-2]##*/}
  info.log "script: $0"
  info.log "caller: $caller"
  result "$caller" "$1" >/dev/null
}

this.caller.function()
{
  local function=${FUNCNAME[1]}
  result "$function" "$1" >/dev/null
}

this.call() 
{
  local aFunction=$1
  shift
  
  local len=${#BASH_LINENO[@]}
  local caller=${BASH_SOURCE[$len-2]##*/}
  #info.log "stack : ${BASH_SOURCE[@]}"
  info.log "script: $0"
  info.log "caller: $caller"

  if (this.functionExists $caller.$aFunction) ; then
    debug.log "this.call: $caller.$aFunction $@"
    $caller.$aFunction "$@"
  else
    local aShellScript=$aFunction
    aFunction=$1
    shift

    if (this.functionExists $aFunction) ; then
      debug.log "this.call: $aFunction $@"
      $aFunction "$@"
    else
      this.load $aFunction $aShellScript "$@"
      debug.log "this.call: $aFunction $@"
      $aFunction "$@"
    fi
  fi
} #2>/dev/null

this.start() 
{
  if [ -z "$1" ]; then
    local len=${#BASH_LINENO[@]}
    local caller=${BASH_SOURCE[$len-2]##*/}
    if (this.functionExists $caller.usage) then
      $caller.usage
    else
      console.log "$0: no parameter: Bye"
    fi
  fi

  while [ -n $1 ]; do
    debug.log "start 1: -$1-"
    case $1 in
      call)
        shift
        "$@"
        ;;
      discover)
        once.discover
        if [ "$ONCE_STATE" = "disvocer" ]; then
          ONCE_STATE=check.installation
          once.stage
        fi
        ;;
      start)
        stop.log "once start"
        once.server.start "$@"
        ;;
      '')
        debug.log "$0: EXIT"
        #exit 0
        return
        ;;
      *)
        debug.log "this.call to: $@"
        this.call "$@"
    esac

    shift

    while [ ! "$RETURN" = "$1" ]; do
      shift
      debug.log "shift:  -Return:$RETURN-  -$1- -command=$COMMANDS-  =$@="
      if [ -z "$1" ]; then
        debug.log "force stop"
        RETURN=
        exit 0
      fi
    done
    debug.log "found RETURN=$1"
    RETURN=$2
    
  done
  debug.log "will stage"
  this.call "$@"
}


this.isSourced()
{
  len=${#BASH_LINENO[@]}
  depth=1

  info.log "Functions: ${FUNCNAME[@]}"
  info.log "bash source: ${BASH_SOURCE[@]}"
  info.log len=$len, depth=$depth
  info.log "check: ${FUNCNAME[1]}"

  if [ "${FUNCNAME[1]}" = "main" ]; then
    info.log "mode starting ${FUNCNAME[@]} in ${BASH_SOURCE[0]##*/} from ${BASH_SOURCE[$len-1]##*/}"
    return 1
  else
    info.log "mode sourcing ${BASH_SOURCE[0]##*/} from ${BASH_SOURCE[$len-1]##*/}" 
    return 0
  fi
}


info.log "
still in ${BASH_SOURCE[0]##*/}
"

if (this.isSourced); then
 info.log "init was sourced"
 this.init
else
 important.log "init was started"
 this.init
 warn.log "starting new configured Bash"
 bash
 stop.log "back after closing bash. now in shell level $SHLVL"
fi