#!/usr/bin/env bash
#clear
#export PS4='\e[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \e[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

private.states.init() # # initialises the stateMachine folder in $CONFIG_PATH 
{
  check dir $CONFIG_PATH/stateMachines not exists \
    call mkdir -p $CONFIG_PATH/stateMachines 
}

state.of() # <machine> <?method> # returns the state of the <machine>
{
  local machine=$1
  local stateID=${machine}_STATE_ID
  shift

  source $CONFIG_PATH/stateMachines/${machine}.states.env
  local state=${!stateID}
  if [ -z "$state" ]; then
    warn.log "state not set"
    state=1
  fi
  local stateName="${machine}_STATES[${state}]"
  local stateList="${machine}_STATES[@]"
  local stateFile="$CONFIG_PATH/stateMachines/${machine}.states.env"

  debug.log "machine ${YELLOW}$machine ${CYAN}state is: ${WHITE}${!stateName}"
  export STATE_MACHINE_CURRENT=$machine
  private.state.update.current.machine

  if [ -n "$1" ]; then 
    local call=$1
    shift
    state.$call - "$@"
    shift
  else
    echo ${state}
  fi
  RETURN=$1
}


private.state.update.current.machine() {
  local stateName="${machine}_STATES[${!stateID}]"
  export STATE_MACHINE_CURRENT=$machine
  {
    echo machine=$machine
    echo stateID=$stateID
    echo state=${!stateID}
    echo stateFound=$stateFound
    echo stateName="${machine}_STATES[${state}]"
    echo stateValue=${!stateName}
    echo stateList=$stateList
    echo stateFile=$stateFile
    echo source $stateFile
  } >$CONFIG_PATH/current.state.machine.env  
}

state.current() # <print> # load current state
{
	source $CONFIG_PATH/current.state.machine.env
	if [ -n "$1" ]; then 
		cat $CONFIG_PATH/current.state.machine.env
	fi
}


state.name() # <machine> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine name
    return 0
  fi
  echo ${!stateName}
}

state.id() # <machine> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine id
    return 0
  fi
  echo ${state}
}

state.parameter.completion.machine() {
  state.list.machines $1
}

state.parameter.completion.nameFilter() {
  state.list.machines $1
}

state.parameter.completion.print() {
  echo "print"
}

state.list.machines() # <?nameFilter> # lists all available stateMachines
{
  cd $CONFIG_PATH/stateMachines
  c2 files.completion $1 | line replace ".states.env"

  if [ -n "$1" ]; then shift; fi
  RETURN=$1
}

state.parameter.completion.method() {
  c2 get.functions $OOSH_DIR/state | line find "#[ ]*<machine>" | line replace "^state\." | line replace "().*$" | line filter "machine\." | line filter "of"
}

state.find() # <machine> <state> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine find "$@"
    shift
    RETURN=$1
    return 0
  fi

  
  local stateName=$1
  if [ -n "$1" ]; then shift; fi  

  if this.isNumber $stateName;then
    local stateFound=${stateName}
    local stateName="${machine}_STATES[${stateName}]"
    stateValue=${!stateName}
    if [ -z "$stateValue" ]; then 
      stateFound=0; 
    else 
      ## TDOD maybe this is a while loop
      if this.isNumber ${!stateName}; then 
        important.log "found transition state: ${stateFound} => ${!stateName}"
        stateFound=${!stateName}
        stateName="${machine}_STATES[${stateFound}]"
      fi
      echo ${!stateName}: ${stateFound}
    fi
  else
    let i=0
    let count=0
    let countInternal=0
    for index in "${!stateList}"; do
      local currentName="${machine}_STATES[$i]"
      debug.log looping ${currentName}  at $index loop $i

        if this.isNumber ${!currentName}; then
          debug.log "skipping ${!currentName}"
          local next=${!currentName}
          i=$next-1
        else 
          let count++
          if [ "${!currentName}" = "$stateName" ]; then
            echo "$i"
            stateFound=$i
            break
          else
            stateFound=0
          fi
        fi
      let i++
      let countInternal++
    done

  fi

  shift
  RETURN=$1


  if [ $stateFound -eq 0 ]; then
    error.log "State '$stateName' not found!"
    return 1
  fi
  private.state.update.current.machine
  debug.log found ${stateName} = $stateFound $stateValue
  return 0
}

state.stage() # <machine> <state> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine stage "$@"
    shift
    RETURN=$1
    return 0
  fi
  
  local stateName=$1
  if [ -n "$1" ]; then shift; fi  

  let state++
  info.log "stage to ${state}"
  state.set $machine ${state}

  shift
  RETURN=$1
}

state.add() # <machine> <newStateName> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine add "$@"
    shift
    RETURN=$1
    return 0
  fi

  if [ $state -eq 1 ]; then state.stage $machine; fi
  if [ $state -gt 2 ]; then 
    error.log "cannot add state!"
    error.log "state machine not in state: [2] = setup  
    but is in state: $state
    "
    important.log "
    you could hard reset the machine $machine to state 2 with

    state set $machine 2
    "
    return 1
  fi
  
  local newStateName=$1
  if [ -n "$1" ]; then 
    shift; 
  else
    error.log "no ${YELLOW}<newStateName>${RED} provided!"
    return 1
  fi  

  echo add ${newStateName}
  local state=$(state.find $machine next.custom.state)
  local stateID="${machine}_STATES[${state}]"
  
  ## TODO check security
  ## printf -v "$name" '%s' 'babibab'
  printf -v "${stateID}" '%s' "${newStateName}"
  # eval ${stateID}=${newStateName}
  
  if this.isNumber ${newStateName}; then
    important.log "adding transition state [${state}] => ${newStateName}"
    state=${newStateName}
  else
    let state++
  fi
  local stateID="${machine}_STATES[${state}]"
  if [ -n "${!stateID}" ]; then
    if [ "${!stateID}" = "99" ]; then
      eval ${stateID}="next.custom.state"
    else${newStateName}
      warn.log "canot overwrite existing state ${stateID}=${!stateID}"
    fi
  else 
    ## TODO
    printf -v "${stateID}" '%s' "next.custom.state"
    # eval ${stateID}="next.custom.state"
  fi
  private.state.machine.update

  state.show

  shift
  RETURN=$1
}

state.set() # <machine> <state> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine set "$@"
    shift
    RETURN=$1
    return 0
  fi

  
  local stateValue=$1
  if [ -n "$1" ]; then shift; fi  



  info.log set ${stateValue} of $machine

  if state.find $machine ${stateValue}; then
    state.current
    info.log set values ${stateValue} = $state = $stateFound 
    if [ "$stateFound" -lt "$state" ]; then
      warn.log " State of ${machine} will be hard reset from: [${!stateID}] => [${stateFound}]"
    fi
    declare -x ${machine}_STATE_ID=${stateFound}
    private.state.machine.update
    source $CONFIG_PATH/current.state.machine.env
    important.log "Set state of ${machine} to: [${stateFound}] = ${stateValue}"
  else
    error.log "not found: $state = $stateFound = $stateResult"
  fi


  shift
  RETURN=$1
}

state.list() # <machine> <stateName> #
{
  local aMachine=$1
  if [ -n "$1" ]; then shift; fi
  if ! [ "$aMachine" = "-" ]; then 
    state.of $aMachine list "$@"
    shift
    RETURN=$1
    return 0
  fi

  
  local stateFilter=$1
  if [ -n "$1" ]; then shift; fi  

  debug.log "machine=${machine}    stateFilter=${stateFilter}   1=$1"



  important.log "${machine}_STATES selected.
  current state: 
  
  [${state}]=${!stateName}
  "
  echo " "

  local stateList="${machine}_STATES[@]"

  let i=0
  let count=0
  let countInternal=0
  for index in "${!stateList}"; do
    local currentName="${machine}_STATES[$i]"
    debug.log looping ${currentName}  at $index loop $i
    if [ "$state" -lt "$i" ] || [ "$stateFilter" = "all" ]; then
      if this.isNumber ${!currentName}; then
        debug.log "skipping ${!currentName}"
        local next=${!currentName}
        i=$next-1
      else 
        let count++
        local colorMod=""
        if [ "$i" -eq "${state}" ]; then
          colorMod=${CYAN}
        fi
        console.log "${colorMod}[$i]\t= ${!currentName}"
      fi
    fi
    let i++
    let countInternal++
  done

  echo
  let transitionStates=$countInternal-$count
  important.log "${machine}_STATES has $count states (and $transitionStates transition states)
  
  "

  shift
  RETURN=$1
}

state.machine.create() # <machine> # creates a stateMachine
{
  local machine=$1
  check file $CONFIG_PATH/stateMachines/${machine}.states.env not exists \
    call state machine.init $machine
}

state.machine.init() {
  local machine=$1
  declare -xag ${machine}_STATES='(\
    [0]="not.installed" \
    [1]="initialized" \
    [2]="setup" \
    [3]="all.states.added" \
    [4]="started" \
    [5]=11 \
    [6]=to.be.deleted \
    [11]="next.custom.state" \
    [12]=99 \
    [99]="finished" \
    [100]=6
    )' 
  
  declare -x ${machine}_STATE_ID=1 >>$CONFIG_PATH/stateMachines/${machine}.states.env
  private.state.machine.update
}


private.state.machine.update() {
  {
    declare -a | line find ${machine}_STATES | line replace ' \[' ' \\-SPLIT-[' | line split '-SPLIT-' | line unquote
    local stateID=${machine}_STATE_ID
    local state=${!stateID}
    if [ -z "$state" ]; then
      error.log "State broken!  reseting to 1"
      state=1
    fi

    echo
    echo ${stateID}=${state}
  } >$CONFIG_PATH/stateMachines/${machine}.states.env
  
  local stateName="${machine}_STATES[${state}]"
  local stateValue="${!stateName}"
  private.state.update.current.machine
}

state.parameter.completion.state() {
  debug.log "parameter.completion.state: $@"
  local stateFilter=$1
  if [ -n "$1" ]; then shift; fi  
  source $CONFIG_PATH/current.state.machine.env

  debug.log "machine=${machine}    stateFilter=${stateFilter}   1=$1  stateList=${!stateList}"


  let i=0
  let count=0
  let countInternal=0
  for index in "${!stateList}"; do
    local currentName="${machine}_STATES[$i]"
    debug.log looping ${currentName}  at $index loop $i
    if [ "$state" -lt "$i" ] || [ "$stateFilter" = "all" ]; then
      if this.isNumber ${!currentName}; then
        debug.log "skipping ${!currentName}"
        local next=${!currentName}
        i=$next-1
      else 
        let count++
        local colorMod=""
        if [ "$i" -eq "${state}" ]; then
          colorMod=${CYAN}
        fi
        echo "${!currentName}"
      fi
    fi
    let i++
    let countInternal++
  done

  echo
  let transitionStates=$countInternal-$count
  debug.log "${machine}_STATES has $count states (and $transitionStates transition states)
  
  "

  shift
  RETURN=$1
}

state.machine.edit() # <machine> # creates a stateMachine
{
  local machine=$1
  if [ -z "$1" ]; then state.current; fi
  if [ "$1" = "-" ]; then state.current; fi
  oo cmd vim
  vim $CONFIG_PATH/stateMachines/${machine}.states.env
}

state.edit() # <machine> # creates a stateMachine
{
  state.machine.edit "$@"
}

state.machine.show() # <machine> # creates a stateMachine
{
  local machine=$1
  if [ -z "$1" ]; then state.current; fi
  if [ "$1" = "-" ]; then state.current; fi
  oo cmd vim
  cat $CONFIG_PATH/stateMachines/${machine}.states.env
}

state.show() # <machine> # creates a stateMachine
{
  state.machine.show "$@"
}

state.machine.delete() # <machine> # creates a stateMachine
{
  local machine=$1
  if [ -z "$1" ]; then 
    error.log "no ${YELLOW}<machine>${RED} provided!"
    return 1 
  fi
  oo cmd vim
  rm $CONFIG_PATH/stateMachines/${machine}.states.env
}



state.usage()
{
  local this=${0##*/}
  echo "You started" 
  echo "$0

  state allows you to create and handle multiple state machines

  Usage:
  $this: command   Parameter and Description"
  this.help
  echo "
  
  Examples
    $this list
    $this init
    ----------
  "
}

state.start()
{
  #echo "sourcing init"
  source this
  private.states.init

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

state.start "$@"

