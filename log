#!/bin/bash

# echo "entering: ${BASH_SOURCE[0]}"
# echo "remove all echos to preseve output"
# echo ""

# export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
# set -x

log.init()
{
  if [ -n "$1" ]; then
    export LOG_LEVEL="$1"
    important.log "log level changed to $LOG_LEVEL"
  else
    export LOG_LEVEL=2
  fi
  important.log "log initialized on level $LOG_LEVEL"
}

if ! [ "$(type -t info.log)" = "function" ]; then
  source init; 
fi  



console.log()
{
  if [ "$LOG_LEVEL" -gt "2" ]; then
    echo -e "\033[0m$*"
  fi
}

success.log() {
    if [ "$LOG_LEVEL" -gt "2" ]; then
        echo -e "\033[1;32mSUCCESS> $*\033[0m" 
    fi
}

warn.log()
{
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;33m> WARNING $*\033[0m"                                    ## yellow
    fi
    {
      shift
      RETURN=$1
    } 2>/dev/null
}

important.log()
{
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;96mIMPORTANT> $*\033[0m"                                    ## cyan
    fi
    {
      shift
      RETURN=$1
    } 2>/dev/null
}

problem.log() {
    if [ "$LOG_LEVEL" -gt "1" ]; then
        echo -e "\033[1;31mPROBLEM BREAKPOINT> $*\033[0m" 
        export STEP_DEBUG=ON
    fi  
}



debug.log() {
    if [ "$LOG_LEVEL" -gt "4" ]; then  
        echo -e "\033[1;36m- $*\033[0m"
    fi
}

stop.log() {
    if [ "$LOG_LEVEL" -gt "3" ]; then
        echo -e "\033[1;32mBREAKPOINT> $*\033[0m" 
        export STEP_DEBUG=ON
    fi  
}

error.log() {
    err.log "$@"
}
err.log() {

    if [ "$LOG_LEVEL" -gt "0" ]; then   
      echo -e "\033[1;31mERROR> $*\033[0m"    
    fi

    if [ "$LOG_LEVEL" -gt "4" ]; then   
        export STEP_DEBUG=ON
    fi   
}

log.level()
{
  if [ -n "$1" ]; then
    local level=$1
    if [ "$level" = "reset" ]; then
      local current=$LOG_LEVEL
      LOG_LEVEL=$LOG_LEVEL_RESET
      LOG_LEVEL_RESET=$current
    else
      LOG_LEVEL_RESET=$LOG_LEVEL
      LOG_LEVEL="$1"
      important.log "log level changed to $LOG_LEVEL"
      check.debug.level
    fi

    shift  
    export RETURN=$1
  else
    result "export LOG_LEVEL=$LOG_LEVEL" "$1" >/dev/null
    echo "$RESULT"
  fi
}



log.start()
{
  #echo "log startet"
  if [ -z "$LOG_LEVEL" ]; then
    log.init $1
  else
    local command=$1
    # if [ -z "$command" ]; then
    #  command="level"
    # fi
    if [ -n "$command" ]; then
      shift
      if (this.functionExists log.$command) ; then
        log.$command "$@"
      fi
    fi
    if [ "$(type -t this.init)" = "function" ]; then
      result 0 "export LOG_LEVEL=$LOG_LEVEL" "$1" >/dev/null
    else
      RETURN_VALUE=0
      RESULT="export LOG_LEVEL=$LOG_LEVEL"
      RETURN="$1"
    fi
    return $RETURN_VALUE
  fi

  check.debug.level
  result 0 "export LOG_LEVEL=$LOG_LEVEL" "$1" >/dev/null
  return $RETURN_VALUE
}



log.start "$@"


# console.log "
# console.log: still in ${BASH_SOURCE[0]##*/}
# "