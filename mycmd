#!/bin/bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

function mycmd.1() {
  console.log "hello ${FUNCNAME[0]} ..."
  
  echo "$1 should be \"a\"" 
  a=$1 
  shift
  b=$1
  echo "$1 should be \"b\""
  shift
  c=$1
  echo "$1 should be \"c\""
  shift

  RETURN=$1

}
function mycmd.2() {
  debug.log "hello ${FUNCNAME[0]} ..."
  echo "$1 should be \"d\""
  shift
  echo "$1 should be \"e\""
  shift
  result 1 "warning message" "$1"
  return $RETURN_VALUE
}
function mycmd.3() {
  console.log "hello ${FUNCNAME[0]} ..."
  echo "$1 should be \"f\""
  shift
  echo "$1 should be \"g\""
  shift

  result 3 "error message" "$1" >/dev/null
  return $RETURN_VALUE
}

function mycmd.4() {
  grep -w '$1' /root/scripts/once
  export st=$?
  if [ $st = 1 ] && [ $1 != 'cmd']; then
    once $1
    shift
  else
    once cmd $1
    shift
  fi
  RETURN=$1
}

mycmd.usage()
{
  local this=${0##*/}
  echo "You started 
$0

  Usage:
  $this: command <parameter>
      1         parameter should be: a b c
      2                              d e  
      3                              e f
      feature1  log-level
  
  Examples
    $this 1 a b c 3 e f
    $this 2 d e 1 a b c
    $this feature1 5
  "
}

mycmd.feature1()
{
  log.level $1
  important.log "Feature ${FUNCNAME[0]} $@"
  mycmd.feature2
}
mycmd.feature2()
{
  important.log "..Feature ${FUNCNAME[0]} $@"
  this.caller
  console.log "caller: $RESULT"

  this.caller.function
  console.log "caller Function: $RESULT"

  mycmd.feature3
}
mycmd.feature3()
{
  important.log "....Feature ${FUNCNAME[0]} $@"

  this.caller
  console.log "caller: $RESULT"

  this.caller.function
  console.log "caller Function: $RESULT"

  this.isSourced
  console.log "caller Function: $RESULT"

  info.log "function stack: ${FUNCNAME[@]}"
  info.log "source   stack: ${BASH_SOURCE[@]##*/}"
}

mycmd.scope()
{
  declare -p
  declare -f | grep "^[^ ]* ()" | cut -d ' ' -f1
}

mycmd.start()
{
  #echo "sourcing init"
  source init
  this.start "$@"
}

mycmd.start "$@"

