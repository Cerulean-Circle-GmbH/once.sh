#!/usr/bin/env bash
#clear
#export PS4='\033[90m+${LINENO} in ${#BASH_SOURCE[@]}>${FUNCNAME[0]}:${BASH_SOURCE[@]##*/} \033[0m'
#set -x

#echo "starting: $0 <LOG_LEVEL=$1>"

### new.method

line.split() { # <?seperator: > # splits the line (for env variables use split.env  because of quoting)
  local seperator="$1"
  if [ -z "$seperator" ]; then
    cat - | tr ' ' '\n'
    return $?
  fi
  line.split.quoted "$seperator"
}

line.split.quoted() { # <?word:"="> <?by:""> # use when the original line is already quoted: "some line = split on equlas"
  local word="$1"
  if [ -n "$1" ]; then
    word="$1"
    shift
  else
    word='='
  fi

  local by="$1"
  if [ -n "$1" ]; then
    by="$1"
    shift
  else
    by="'"$'\\\n'"'"
  fi

  #cat - | tr "$seperator" "\n"
  cat - | line.quote | sed "s/$word/$by/g"
}

line.split.env() { # # 
  local word="$1"
  if [ -n "$1" ]; then
    word="$1"
    shift
  else
    word='='
  fi
  cat - | line.quote | line.split.quoted "$word"
}

line.format.env() {       # <?format:"FORMAT_ENV"> # 
    local format="$1"
  if [ -n "$1" ]; then
    format="$1"
    shift
  else
    format="${RED}%-40s${YELLOW}=${GREEN} %-20s\n"
  fi
  cat - | line.split.env | line.format "$format"
}

line.replace() { # <?word: > <?by:> # replace <word> with <by>.
  local word="$1"
  if [ -n "$1" ]; then
    word="$1"
    shift
  else
    word=''
  fi

  local by="$1"
  if [ -n "$1" ]; then
    by="$1"
    shift
  else
    by=''
  fi

  #cat - | tr "$seperator" "\n"
  cat - | sed "s/$word/$by/g"
}


line.keys() { # <?seperator:" "> #
  local seperator="$1"
  if [ -z "$seperator" ]; then
    seperator=' '
  fi
  cat - | cut -d "$seperator" -f1
}

line.values() { # <?seperator:" "> #
  local seperator="$1"
  if [ -z "$seperator" ]; then
    seperator=' '
  fi
  cat - | cut -d "$seperator" -f2
}

line.select() {               # <?lineNumber> #
  cat - | sed -n "$1p"
}

line.remove() {               # <?lineNumber> #
  if this.isNumber "$1"; then
    cat - | sed -n "$1d"
  else
    cat - | grep -v "$1"
  fi
}


line.count() {  # # 
  cat - | grep -c "$1$"
}

line.join() {                 # <?charakter=".">  #
  local char="$1"
  if [ -n "$1" ]; then
    shift
  else
    char="."
  fi

  #cat - | xargs | sed -e "s/ /$char/g"
  cat - | line format "%s$char" | line.replace "$char$"

}

line.into() {
  export $1="$( cat - )"
  echo "$1=${!1}" >$CONFIG_PATH/result.env
}

line.key() { # <?charakter=" "> #
  line.split "$1" | line.select 1
}

line.value() { # <?charakter=" "> #
  line.split "$1" | line.select 2
}

line.trim() { # #
  #all
  cat - | xargs 
}

line.trim.leading() { # #
  #leading
  cat - | sed -e 's/^[[:space:]]*//'
}

line.trim.trailing() { # #
  #trailing
  cat - | sed -e 's/[[:space:]]*$//'
}

line.trim.quoted.leading() { # #
  #trailing
  cat - | sed -e "s/^'[[:space:]]*/'/"
}

line.trim.quoted.trailing() { # #
  #trailing
  cat - | sed -e "s/[[:space:]]*'$/'/"
}

line.trim.quoted() { # #
  #trailing
  cat - | line.trim.quoted.leading | line.trim.quoted.trailing
}

line.dots() { # #
  line.space2 '.'
}

line.space2() { # <?charakter=" "> #
  local replace="$1"
  if [ -z "$replace" ]; then
    replace='.'
  fi
  cat - | sed -e "s/[[:space:]]/$replace/g"
}

line.find() { # <from> <to:"[empty line]"> #
  local from="$1"
  if [ -n "$1" ]; then
    from="$1"
    shift
  else
    error.log "no parameter 'from' provided"
  fi

  local to="$1"
  if [ -n "$1" ]; then
    to="$1"
    shift
  else
    to="$"
  fi

  if this.isNumber "$to"; then
    cat - | grep -A "$to" "$from"
  else
    cat - | awk "/$from/,/$to/" 
  fi
}



line.table() { # <?seperator:";"> <?heading:" ">  # prints a table (standad for csv)
  local seperator="$1"
  if [ -n "$1" ]; then
    seperator="$1"
    shift
  else
    seperator=";"
  fi

  local heading="$1"
  if [ -n "$1" ]; then
    heading="$1"
    shift
    #https://github.com/jorinvo/prepend
    cat - | line.prepend "${GREEN}$heading${NORMAL}" | column -t -s "$seperator"
    return 0
  fi

  cat - | column -t -s "$seperator"

}

line.format() { # #
  #set -x
  local format="$1"
  if [ -n "$1" ]; then
    format="$1"
    shift
  else
    format="%s "
  fi

  case "${format}" in
    FORMAT_*)
      format="${!format}"
      ;;
  esac

  cat - | xargs  printf "$format"
  #cat - | tr '\n' '\0' | xargs -0 -n1 printf "$format"
}

line.find.function() { # <functionName> # finds a function
  local functionName="$1"
  if [ -n "$1" ]; then
    functionName="$1"
    shift
  # else
  #   error.log "no functionName provided"
  fi

  cat - \
  | line.find "$functionName.*\(\)" "$" \
  | line.quote 
  
  #source $CONFIG_PATH/result.env
  #set | line.find "^ARG_" | line.format.env
}

line.unify() { # <sepearator> <defaultColumn1> ... <defaultColumnN> #

  local seperator="$1"
  if [ -z "$seperator" ]; then
    seperator=' '
  else
    shift
  fi
  cat - \
    | line.quote \
    | private.line.unify.each "$seperator" "$@"
  
}

private.line.unify.each() { # # 
  local seperator="$1"
  if [ -z "$seperator" ]; then
    seperator=' '
  else
    shift
  fi
  read -r line

  while [ -n "$line" ]; do
    echo -e "$line" | line.split.quoted "$seperator" | line.unify.one "$@"
    read -r line 
  done
}

line.unify.one() {  # # 
  while [ -n "$1" ]; do
    read -r line
    if [ -n "$line" ]; then
      echo -e "$line"
    else
      printf "'%s'\n" "$1"
    fi
    shift
  done
}

line.prepend.all() { # <sepearator> <defaultColumn1> ... <defaultColumnN> #
  cat - \
  | line.format "$1%s\n"
}

line.get.parameter() { # <functionName> # parses the function parameters

  local functionName="$1"
  if [ -n "$1" ]; then
    functionName="$1"
    shift
  else
    error.log "no functionName provided"
  fi

  cat "$This" \
  | line.find.function $functionName \
  | line.format FORMAT_PARSE_HELP \
  | line.split '|' \
  | line.select 2 \
  | line.parse.paramList
  
  #source $CONFIG_PATH/result.env
  #set | line.find "^ARG_" | line.format.env
}

line.parse.paramList() { # # parses a (yellow) list of parameters into $CONFIG_PATH/result.txt
  cat - \
  | line.split '<' \
  | line.replace '>' \
  | line remove.emptyLines \
  | line.parse.param >$CONFIG_PATH/result.env


  # cat $CONFIG_PATH/result.env \
  # | line.replace "declare -l " \
  # | line.format.env

  if [ "$LOG_LEVEL" -gt "3" ]; then
    source $CONFIG_PATH/result.env
    set | line.find "^ARG_" | line.format.env
  fi
}

line.remove.emptyLines() { # # 
  cat - | grep "^." 
}

line.parse.param() { # # 
  cat - \
  | line.unify ':' "parameterName" "addDefaultValue" \
  | line.format FORMAT_DECLARE_LOCAL \
  | line.replace '?' 'OPTIONAL_'


}

line.quote() { # #
  cat - | line.unquote | tr '\n' '\0' | xargs -0 -n1 printf "'%s'\n"

  #cat - | line.format "\'%s\' "
}

line.args() { # # 
  #printf "\'%s\'\n" "$( cat - )"

  cat - | line.format "\'%s\' "
}

line.prepend() { # # 
  echo -e "$1"
  cat -
}

line.add() { # # 
  cat -
  echo -e "'$1'"
}

line.strip.color() { # # 
  cat - \
  | line.replace "\\[0-9]*m\[" 
}

line.unquote() { # # 
  cat - \
  | line.replace "^'" \
  | line.replace "'$"
}

line.declare() { # # 
  env | line.split = | line.join ' ' | xargs  printf 'declare -l %s=%s\n'
}


private.line.format.init() { # # 
  export FORMAT_ENV="${RED}%-20s ${YELLOW}= ${GREEN}%s${NORMAL}\n"
  export FORMAT_DECLARE_LOCAL="declare -l ARG_%s='%s'\n"
  export FORMAT_HELP="      ${CYAN}%-20s ${YELLOW}| %-30s ${GREEN}| %s\n"
  export FORMAT_PARSE_HELP="%s|%s|%s\n"

  config save lineFormat "FORMAT_"
}

line.formats.edit() { # # edit $CONFIG_PATH/lineFormat.env
  vim $CONFIG_PATH/lineFormat.env
}

line.clean.config() {
  rm $CONFIG_PATH/color.env
  rm $CONFIG_PATH/color.names.env
  rm $CONFIG_PATH/bold.color.names.env
  rm $CONFIG_PATH/lineFormat.env
}

line.usage() { # # 
  local this=${0##*/}
  echo "You started" 
  echo "$0

  Usage:
  $this: command   description and Parameter

      usage     prints this dialog while it will print the status when there are no parameters          
      v         print version information
      init      initializes ...nothing yet
      ----      --------------------------"
  this.help
  echo "
  
  Examples
    $this v
    $this init
    echo cool.and.the.gang is mega | line split ' ' | line split . | line select 6
                                                                     line join '#'
    echo key=value | line key =
    echo \" key value\" | line trim | line key 
    echo \$PATH | line split : | sort  | uniq | line join :
    env | line find KEYC | line format.env | line value =
    ls -al | line table ' ' 'rights - sub owner group size month day time name link'
  "
}

line.init() {
  REGEX_EMPTY_LINE="^$"
  REGEX_LINE_END="$"
  REGEX_BRACKETS="\(\)"
  REGEX_NEW_LINE=$'\\\n'

             ESC=$'\033['
          BOLD="${ESC}0;1m"
        NORMAL=${ESC}"0m"
      NO_COLOR=${ESC}"0m"

  
  if ! [ -f $CONFIG_PATH/color.env ];then
    {  
      echo     COLOR_RED="${ESC}31m"
      echo   COLOR_GREEN="${ESC}32m"
      echo    COLOR_BLUE="${ESC}0m"
      echo    COLOR_CYAN="${ESC}96m"
      echo    COLOR_GRAY="${ESC}90m"
      echo  COLOR_YELLOW="${ESC}33m"
      echo   COLOR_WHITE="${ESC}37m"
    } >$CONFIG_PATH/color.env
    cat $CONFIG_PATH/color.env | line.find "COLOR_" | line.replace COLOR_ >$CONFIG_PATH/color.names.env
    cat $CONFIG_PATH/color.env | line.find COLOR_ | line.replace COLOR_ BOLD_ | line.replace "{ESC}" "{ESC}1;" >$CONFIG_PATH/bold.color.names.env
    if [ -f $CONFIG_PATH/lineFormat.env ]; then
      rm $CONFIG_PATH/lineFormat.env
    fi    
  fi

  source $CONFIG_PATH/color.env
  source $CONFIG_PATH/color.names.env
  source $CONFIG_PATH/bold.color.names.env

  if ! [ -f $CONFIG_PATH/lineFormat.env ]; then
    private.line.format.init
  fi 
}




line.start() { # # 
  #echo "sourcing init"
  source this
   
  line.init
  source $CONFIG_PATH/lineFormat.env

  # if [ -z "$1" ]; then
  #   status.discover "$@"
  #   return 0
  # fi

  this.start "$@"
}

line.start "$@"

